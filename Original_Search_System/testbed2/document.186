In computer science and operations research, the ant colony optimization algorithm (ACO) is a probabilistic technique for solving computational problems which can be reduced to finding good paths through graphs. This algorithm is a member of the ant colony algorithms family, in swarm intelligence methods, and it constitutes some metaheuristic optimizations. Initially proposed by Marco Dorigo in 1992 in his PhD thesis, the first algorithm was aiming to search for an optimal path in a graph, based on the behavior of ants seeking a path between their colony and a source of food. The original idea has since diversified to solve a wider class of numerical problems, and as a result, several problems have emerged, drawing on various aspects of the behavior of ants. == OverviewEdit == In the natural world, ants (initially) wander randomly, and upon finding food return to their colony while laying down pheromone trails. If other ants find such a path, they are likely not to keep travelling at random, but instead to follow the trail, returning and reinforcing it if they eventually find food (see Ant communication). Over time, however, the pheromone trail starts to evaporate, thus reducing its attractive strength. The more time it takes for an ant to travel down the path and back again, the more time the pheromones have to evaporate. A short path, by comparison, gets marched over more frequently, and thus the pheromone density becomes higher on shorter paths than longer ones. Pheromone evaporation also has the advantage of avoiding the convergence to a locally optimal solution. If there were no evaporation at all, the paths chosen by the first ants would tend to be excessively attractive to the following ones. In that case, the exploration of the solution space would be constrained. Thus, when one ant finds a good (i.e., short) path from the colony to a food source, other ants are more likely to follow that path, and positive feedback eventually leads to all the ants following a single path. The idea of the ant colony algorithm is to mimic this behavior with "simulated ants" walking around the graph representing the problem to solve. == Common extensionsEdit == Here are some of the most popular variations of ACO algorithms. === Elitist ant systemEdit === The global best solution deposits pheromone on every iteration along with all the other ants. === Max-min ant system (MMAS)Edit === Added maximum and minimum pheromone amounts [τmax,τmin]. Only global best or iteration best tour deposited pheromone <MAZ>. All edges are initialized to τmax and reinitialized to τmax when nearing stagnation. === Ant colony systemEdit === It has been presented above. === Rank-based ant system (ASrank)Edit === All solutions are ranked according to their length. The amount of pheromone deposited is then weighted for each solution, such that solutions with shorter paths deposit more pheromone than the solutions with longer paths. === Continuous orthogonal ant colony (COAC)Edit === The pheromone deposit mechanism of COAC is to enable ants to search for solutions collaboratively and effectively. By using an orthogonal design method, ants in the feasible domain can explore their chosen regions rapidly and efficiently, with enhanced global search capability and accuracy. The orthogonal design method and the adaptive radius adjustment method can also be extended to other optimization algorithms for delivering wider advantages in solving practical problems. === Recursive ant colony optimizationEdit === It is a recursive form of ant system which divides the whole search domain into several sub-domains and solves the objective on these subdomains. The results from all the subdomains are compared and the best few of them are promoted for the next level. The subdomains corresponding to the selected results are further subdivided and the process is repeated until an output of desired precision is obtained. This method has been tested on ill-posed geophysical inversion problems and works well. == ConvergenceEdit == For some versions of the algorithm, it is possible to prove that it is convergent (i.e., it is able to find the global optimum in finite time). The first evidence of a convergence ant colony algorithm was made in 2000, the graph-based ant system algorithm, and then algorithms for ACS and MMAS. Like most metaheuristics, it is very difficult to estimate the theoretical speed of convergence. In 2004, Zlochin and his colleagues showed that COA-type algorithms could be assimilated methods of stochastic gradient descent, on the cross-entropy and estimation of distribution algorithm. They proposed these metaheuristics as a "research-based model". A performance analysis of continuous ant colony algorithm based on its various parameter suggest its sensitivity of convergence on parameter tuning. == Example pseudo-code and formulaEdit == === Edge selectionEdit === An ant is a simple computational agent in the ant colony optimization algorithm. It iteratively constructs a solution for the problem at hand. The intermediate solutions are referred to as solution states. At each iteration of the algorithm, each ant moves from a state to state , corresponding to a more complete intermediate solution. Thus, each ant computes a set of feasible expansions to its current state in each iteration, and moves to one of these in probability. For ant , the probability of moving from state to state depends on the combination of two values, viz., the attractiveness of the move, as computed by some heuristic indicating the a priori desirability of that move and the trail level of the move, indicating how proficient it has been in the past to make that particular move. The trail level represents a posteriori indication of the desirability of that move. Trails are updated usually when all ants have completed their solution, increasing or decreasing the level of trails corresponding to moves that were part of "good" or "bad" solutions, respectively. In general, the th ant moves from state to state with probability where is the amount of pheromone deposited for transition from state to , 0 ≤ is a parameter to control the influence of , is the desirability of state transition (a priori knowledge, typically , where is the distance) and ≥ 1 is a parameter to control the influence of . and represent the attractiveness and trail level for the other possible state transitions. === Pheromone updateEdit === When all the ants have completed a solution, the trails are updated by where is the amount of pheromone deposited for a state transition , is the pheromone evaporation coefficient and is the amount of pheromone deposited by th ant, typically given for a TSP problem (with moves corresponding to arcs of the graph) by where is the cost of the th ant's tour (typically length) and is a constant. == ApplicationsEdit == Ant colony optimization algorithms have been applied to many combinatorial optimization problems, ranging from quadratic assignment to protein folding or routing vehicles and a lot of derived methods have been adapted to dynamic problems in real variables, stochastic problems, multi-targets and parallel implementations. It has also been used to produce near-optimal solutions to the travelling salesman problem. They have an advantage over simulated annealing and genetic algorithm approaches of similar problems when the graph may change dynamically; the ant colony algorithm can be run continuously and adapt to changes in real time. This is of interest in network routing and urban transportation systems. The first ACO algorithm was called the ant system and it was aimed to solve the travelling salesman problem, in which the goal is to find the shortest round-trip to link a series of cities. The general algorithm is relatively simple and based on a set of ants, each making one of the possible round-trips along the cities. At each stage, the ant chooses to move from one city to another according to some rules: It must visit each city exactly once; A distant city has less chance of being chosen (the visibility); The more intense the pheromone trail laid out on an edge between two cities, the greater the probability that that edge will be chosen; Having completed its journey, the ant deposits more pheromones on all edges it traversed, if the journey is short; After each iteration, trails of pheromones evaporate. === Scheduling problemEdit === Job-shop scheduling problem (JSP) Open-shop scheduling problem (OSP) Permutation flow shop problem (PFSP) Single machine total tardiness problem (SMTTP) Single machine total weighted tardiness problem (SMTWTP) Resource-constrained project scheduling problem (RCPSP) Group-shop scheduling problem (GSP) Single-machine total tardiness problem with sequence dependent setup times (SMTTPDST) Multistage flowshop scheduling problem (MFSP) with sequence dependent setup/changeover times === Vehicle routing problemEdit === Capacitated vehicle routing problem (CVRP) Multi-depot vehicle routing problem (MDVRP) Period vehicle routing problem (PVRP) Split delivery vehicle routing problem (SDVRP) Stochastic vehicle routing problem (SVRP) Vehicle routing problem with pick-up and delivery (VRPPD) Vehicle routing problem with time windows (VRPTW) Time dependent vehicle routing problem with time windows (TDVRPTW) Vehicle routing problem with time windows and multiple service workers (VRPTWMS) === Assignment problemEdit === Quadratic assignment problem (QAP) Generalized assignment problem (GAP) Frequency assignment problem (FAP) Redundancy allocation problem (RAP) === Set problemEdit === Set cover problem (SCP) Partition problem (SPP) Weight constrained graph tree partition problem (WCGTPP) Arc-weighted l-cardinality tree problem (AWlCTP) Multiple knapsack problem (MKP) Maximum independent set problem (MIS) === Device sizing problem in nanoelectronics physical designEdit === Ant colony optimization (ACO) based optimization of 45 nm CMOS-based sense amplifier circuit could converge to optimal solutions in very minimal time. Ant colony optimization (ACO) based reversible circuit synthesis could improve efficiency significantly. === Image processingEdit === ACO algorithm is used in image processing for image edge detection and edge linking. Edge detection: The graph here is the 2-D image and the ants traverse from one pixel depositing pheromone.The movement of ants from one pixel to another is directed by the local variation of the image’s intensity values. This movement causes the highest density of the pheromone to be deposited at the edges. The following are the steps involved in edge detection using ACO: Step1: Initialization:Randomly place ants on the image where . Pheromone matrix are initialized with a random value. The major challenge in the initialization process is determining the heuristic matrix. There are various methods to determine the heuristic matrix. For the below example the heuristic matrix was calculated based on the local statistics: the local statistics at the pixel position (i,j). Where is the image of size ,which is a normalization factor can be calculated using the following functions: The parameter in each of above functions adjusts the functions’ respective shapes.Step 2 Construction process:The ant’s movement is based on 4-connected pixels or 8-connected pixels. The probability with which the ant moves is given by the probability equation Step 3 and Step 5 Update process:The pheromone matrix is updated twice. in step 3 the trail of the ant (given by ) is updated where as in step 5 the 