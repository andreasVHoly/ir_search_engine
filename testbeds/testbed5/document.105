RoboMind
From Wikipedia, the free encyclopedia
RoboMind
Original author(s)	Arvid Halma, Research Kitchen
Initial release	2005
Stable release	5.3 / November 18, 2014; 16 months ago
Written in	Java
Type	Educational
License	RoboMind Licence[1]
Website	www.robomind.net
RoboMind is a simple educational programming environment with its own scripting language that allows beginners to learn the basics of computer science by programming a simulated robot. In addition to introducing common programming techniques, it also aims at offering insights in robotics and artificial intelligence. RoboMind is available as stand-alone application for Windows, Linux and Mac OS X. It was first released in 2005 and was originally developed by Arvid Halma, a student of the University of Amsterdam at that time. Since 2011 RoboMind is published by Research Kitchen.[2]

Contents  [hide] 
1	The simulation environment
2	The scripting language
3	Relation to other educational software
4	See also
5	References
6	External links
The simulation environment[edit]
The application is built around a two-dimensional grid world in which a robot can move around, observe neighboring cells, or mark them by leaving a paint trail. The world may also contain so-called beacons that can be carried around by the robot in order to clear its way.

Since version 4.0, it is possible to export RoboMind scripts to robots in the real world directly. Currently, Lego Mindstorms NXT 2.0 are supported.[3]

The scripting language[edit]
RoboMind offers a basic scripting language that consists of a concise set of rules. Apart from commands to make the robot perform basic movement instructions, the control flow can be modified by conditional branching (if-then-else), loops (while) and calls to custom procedures.

Example script to draw square:

paintWhite
repeat(4) {
    forward(2)
    right
}
Recursive line follower example:

follow

procedure follow{
    if(frontIsWhite){
              forward(1)                
    }
    else if(rightIsWhite){
              right
    }
    else if(leftIsWhite){
         left
    }
    else{
         end
    }
    follow
}
The programming environment offers an integrated text editor to write these scripts, with syntax highlighting, autocompletion and line numbering.

Modifications to the environment, such as painting grid cells, are used to store a runtime state. This shows the robot in its environment is directly related to 2D Turing machines.[4][5] Since version 5.0, the language does allow the declaration of variables and functions (procedures that return values).

The scripting language itself is currently available in 22 languages: Arabic, Catalan, Chinese, Czech, Dutch, English, French, German, Greek, Hungarian, Indonesian, Korean, Polish, Brazilian Portuguese, Russian, Slovak, Slovenian, Spanish, Swedish, Thai, Turkish and Ukrainian. All instructions and keywords can be translated. This makes it easier to learn for non-English speakers than most other programming languages that are constrained to English syntax and Latin alphabets.yolo

Relation to other educational software[edit]
RoboMind is somewhat similar to Karel the Robot but its syntax is closer to C/C++ while Karel is closer to Pascal.

RoboMind can be related to the Logo, at which a turtle can be moved around to create geometric shapes. The syntax of RoboMind however is different and corresponds more directly to main stream scripting languages, such as JavaScript. In RoboMind perceiving and changing the environment are of equal importance, where Logo focuses mostly on the latter. This makes RoboMind more suitable to demonstrate real life applications. In Logo, on the other hand, users have more freedom to create visual effects.

Other free educational programming languages, such as Alice and Scratch focus on the wider domain of interactive story telling.

See also[edit]
Educational programming language
Karel the Robot (programming language)
RUR-PLE
Microsoft Small Basic
Minibloq
Logo (programming language)
Alice (software)
Scratch (programming language)
Kodu Game Lab
TouchDevelop