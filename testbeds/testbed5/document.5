Which is the most complex programming language?

JavaScript may be today’s go-to for front-end programming, but in many ways it’s a language that mimics what has come before. Just like COBOL, C, C++, C#, Java and Python, JavaScript is a procedural language. There’s nothing distinctive about JavaScript, with one big exception: JavaScript has a code complexity problem.

How could JavaScript, a language based on the same paradigm as many others, have a complexity problem that is so singular? The answer is temporality. JavaScript sits in a unique spot in software development history, rising squarely in the midst of a shift from mostly back-end to mostly front-end development, which was spurred by the mobile revolution.

Newly popular front-end developers would need to clean up the messy legacy of overtaxed designers, who had played second fiddle and thus rarely received the resources they needed to finish the job. Unfortunately, there wasn’t time for clean-up, or rather, leadership didn’t make time as they continued to ask for more bells and whistles.

This is the conundrum in which JavaScript programmers found themselves in the late 2000s and it’s a story that plays out in the data. Seerene has analyzed more than 400 billion lines of code to identify and visualise the programming languages that create the most headaches for developers.

Take a look at the infographic below to see if your language of choice is among the most complex, confusing or inefficient.
