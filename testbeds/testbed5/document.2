The best programming languages you can learn
What programming language you learn depends entirely on who you are and what your goal is. I’m going to assume you’re an informed beginner, meaning you haven’t been writing code professionally and are just looking to pick up a new language, but you also are not in the situation where you’ve never tried it before—maybe you’ve messed around with some online tutorials, and are thinking about taking it more seriously.

So for you, informed beginner, the first thing you need to think about is what’s motivating you. Are you looking to get a job? Build an app? Pick up a hobby? Picking what and how you learn based on your end goal should be the single most important factor in your decision making—not the market, not what’s trendy, and not what a random person tells you is best to start with. The reason for that is simple: learning to code is really, really hard. It will require you to think in brand new ways and deal with tremendous amounts of frustration and self-doubt. If you’re motivated to learn because you want to build an iOS app, start with Swift/Objective-C. If you’re dying to build an Android app, learn Java and Android. If you want to make visualizations on the web, start with Javascript and then the D3.JS framework. While none of these might be the objective “best first language,” the single most important thing you can do is be motivated, and if you have a personal connection to some goal or idea, focus on that—the benefit will outweigh anything else.

I know all that sounds a little hokey, but I truly think that my biggest responsibility as an educator is to inspire students to fall in love with code. Hence the Flatiron School homepage (“Learn Love Code”) and the giant quote on the wall on campus:

Now that that’s out of the way, let’s look at some specific options.

Assuming you’re not necessarily interested in system programming (like building an operating system), you’ll first want to figure out if you’re interested in the front-end or back-end.

On the front-end side, your choices are pretty clear: HTML, CSS, and Javascript. Once you have a handle on those, you’ll want to start messing around with some front-end frameworks like Ember, Angular, etc…

Regarding back-end languages, you have a few primary choices.

    Java—I believe Java is the most common programming language in use today. It’s what the AP exam uses to teach computer science (CS), and is the lingua franca at most universities for those considering a CS degree. It’s also the core language needed for Android development. So, if you’re looking to get a CS degree or build native Android apps, you may want to start here.
    Python—Python is what’s used at Google, and is also being increasingly taught at universities. Its true strength is in data, so if you’re looking to become a data scientist, you’ll likely need to learn Python somewhere along the way. Aside from that, it’s got its own web framework (Django) which makes it a great option for building web applications.
    Ruby—My bias will shine through here—I absolutely love Ruby. It was developed in the 1990s and exploded in popularity after the creation of Rails, which allowed people to easily build apps for the web. Ruby is very similar to Python in a lot of ways, but the small differences are what makes me love it (and make it such a great language for people starting out). First, Ruby has a tremendously active and welcoming open-source community. One of the core tenants of Ruby is “MINSWAN,” which means Matz (creator of Ruby) Is Nice So We Are Nice. Additionally, Ruby is incredibly expressive. Where in Python it is viewed that there should be one, and only one, right way to do something, Rubyists believe that the way we write code is an expression of our values and individuality.

