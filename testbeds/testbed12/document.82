
![Open Source Society University (OSSU)](http://i.imgur.com/GjEbgIJ.png)

<h3 align="center">Open Source Society University</h3>
<p align="center">
  Path to a free self-taught education in Computer Science!
</p>
<p align="center">
  <a href="https://github.com/sindresorhus/awesome">
    <img alt="Awesome" src="https://cdn.rawgit.com/sindresorhus/awesome/d7305f38d29fed78fa85652e3a63e154dd8e8829/media/badge.svg">
  </a>
</p>

## Contents

- [About](#about)
- [Becoming an OSS student](#becoming-an-oss-student)
- [Motivation & Preparation](#motivation--preparation)
- [Curriculum](#curriculum)
- [How to use this guide](#how-to-use-this-guide)
- [Prerequisite](#prerequisite)
- [How to collaborate](#how-to-collaborate)
- [Community](#community)
- [Next Goals](#next-goals)
- [References](#references)

## About

This is a **solid path** for those of you who want to complete a **Computer Science** course on your own time, **for free**, with courses from the **best universities** in the World.

In our curriculum, we gave preference to MOOC (Massive Open Online Course) style courses because those courses were created with our style of learning in mind.

## Becoming an OSS student

To officially register for this course you must create a profile in our [web app](https://ossu.firebaseapp.com).

> **"How can I do this?"**

Just create an account on GitHub and log in with this account in our web app.

The intention of this app is to offer for our students a way to track their progress, and also the ability to show their progress through a public page for friends, family, employers, etc.

In the "My Progress" tab, you are able to edit the status of the courses that you are taking, and also add the link of your final project for each one.

## Motivation & Preparation

Here are two interesting links that can make **all** the difference in your journey.

The first one is a motivational video that shows a guy that went through the "MIT Challenge", that consists in learning the entire **4-year** MIT curriculum for Computer Science in **1 year**.

- [MIT Challenge](http://www.scotthyoung.com/blog/myprojects/mit-challenge-2/)

The second link is a MOOC that will teach you learning techniques used by experts in art, music, literature, math, science, sports, and many other disciplines. These are **fundamental abilities** to succeed in our journey.

- [Learning How to Learn](https://www.coursera.org/learn/learning-how-to-learn)

**Are you ready to get started?**

## Curriculum

- [Introduction to Computer Science](#introduction-to-computer-science)
- [Math (Mathematical Thinking)](#math-mathematical-thinking)
- [Program Design](#program-design)
- [Math (Discrete Math)](#math-discrete-math)
- [Algorithms](#algorithms)
- [Programming Paradigms](#programming-paradigms)
- [Software Testing](#software-testing)
- [Math (Calculus)](#math-calculus)
- [Software Architecture](#software-architecture)
- [Theory](#theory)
- [Software Engineering](#software-engineering)
- [Math (Probability)](#math-probability)
- [Computer Architecture](#computer-architecture)
- [Operating Systems](#operating-systems)
- [Computer Networks](#computer-networks)
- [Databases](#databases)
- [Cloud Computing](#cloud-computing)
- [Math (Linear Algebra)](#math-linear-algebra)
- [Cryptography](#cryptography)
- [Security](#security)
- [Compilers](#compilers)
- [Parallel Computing](#parallel-computing)
- [UX Design](#ux-design)
- [Computer Graphics](#computer-graphics)
- [Artificial Intelligence](#artificial-intelligence)
- [Machine Learning](#machine-learning)
- [Natural Language Processing](#natural-language-processing)
- [Big Data](#big-data)
- [Data Mining](#data-mining)
- [Internet of Things](#internet-of-things)
- [Specializations](#specializations)

---

### Introduction to Computer Science

Courses | Duration | Effort
:-- | :--: | :--:
[Introduction to Computer Science and Programming Using Python](https://www.edx.org/course/introduction-computer-science-mitx-6-00-1x-5#!)| 9 weeks | 15 hours/week
[From Nand to Tetris (Part 1) ](https://www.coursera.org/learn/build-a-computer) | 6 weeks | 5-10 hours/week

### Math (Mathematical Thinking)

Courses | Duration | Effort
:-- | :--: | :--:
[Effective Thinking Through Mathematics](https://www.edx.org/course/effective-thinking-through-mathematics-utaustinx-ut-9-01x) | 9 weeks | 5 hours/week

### Program Design

Courses | Duration | Effort
:-- | :--: | :--:
[How to Code: Systematic Program Design - Part 1](https://www.edx.org/course/how-code-systematic-program-design-part-ubcx-spd1x)| 5 weeks | 8-12 hours/week
[How to Code: Systematic Program Design - Part 2](https://www.edx.org/course/how-code-systematic-program-design-part-ubcx-spd2x)| 5 weeks | 8-12 hours/week
[How to Code: Systematic Program Design - Part 3](https://www.edx.org/course/how-code-systematic-program-design-part-ubcx-spd3x)| 5 weeks | 8-12 hours/week

### Math (Discrete Math)

Courses | Duration | Effort
:-- | :--: | :--:
[Mathematics for Computer Science](http://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-042j-mathematics-for-computer-science-fall-2010/index.htm)| 12 weeks | 5 hours/week

### Algorithms

Courses | Duration | Effort
:-- | :--: | :--:
[Algorithms, Part I](https://www.coursera.org/course/algs4partI)| 6 weeks | 6-12 hours/week
[Algorithms, Part II](https://www.coursera.org/course/algs4partII)| 6 weeks |  6-12 hours/week

### Programming Paradigms

Courses | Duration | Effort
:-- | :--: | :--:
[Functional Programming Principles in Scala](https://www.coursera.org/course/progfun)| 7 weeks | 5-7 hours/week
[Object Oriented Programming in Java](https://www.coursera.org/learn/object-oriented-java) | 6 weeks | 4-6 hours/week

### Software Testing

Courses | Duration | Effort
:-- | :--: | :--:
[Software Testing](https://www.udacity.com/course/software-testing--cs258)| 4 weeks | 6 hours/week
[Software Debugging](https://www.udacity.com/course/software-debugging--cs259)| 8 weeks | 6 hours/week

### Math (Calculus)

Courses | Duration | Effort
:-- | :--: | :--:
[Calculus One](https://www.coursera.org/learn/calculus1)| 16 weeks | 8-10 hours/week
[Calculus Two: Sequences and Series](https://www.coursera.org/learn/advanced-calculus)| 7 weeks | 9-10 hours/week

### Software Architecture

Courses | Duration | Effort
:-- | :--: | :--:
[Software Architecture & Design](https://www.udacity.com/course/software-architecture-design--ud821)| 8 weeks | 6 hours/week

### Theory

Courses | Duration | Effort
:-- | :--: | :--:
[Automata](https://www.coursera.org/course/automata)| 6 weeks | 8-10 hours/week

### Software Engineering

Courses | Duration | Effort
:-- | :--: | :--:
[Software Processes and Agile Practices](https://www.coursera.org/learn/software-processes-and-agile-practices)| 4 weeks | 6-8 hours/week

### Math (Probability)

Courses | Duration | Effort
:-- | :--: | :--:
[Introduction to Probability - The Science of Uncertainty](https://www.edx.org/course/introduction-probability-science-mitx-6-041x-0)| 16 weeks | 12 hours/week

### Computer Architecture

Courses | Duration | Effort
:-- | :--: | :--:
[Computer Architecture](https://www.coursera.org/course/comparch)| - | 5-8 hours/week

### Operating Systems

Courses | Duration | Effort
:-- | :--: | :--:
[Operating Systems and System Programming](https://www.youtube.com/view_play_list?p=-XXv-cvA_iBDyz-ba4yDskqMDY6A1w_c)| 10 weeks | 2-3 hours/week

### Computer Networks

Courses | Duration | Effort
:-- | :--: | :--:
[Computer Networks](https://www.coursera.org/course/comnetworks)| - | 4â€“12 hours/week

### Databases

Courses | Duration | Effort
:-- | :--: | :--:
[Databases](https://lagunita.stanford.edu/courses/DB/2014/SelfPaced/about)| 12 weeks | 8-12 hours/week

### Cloud Computing

Courses | Duration | Effort
:-- | :--: | :--:
[Introduction to Cloud Computing](https://www.edx.org/course/introduction-cloud-computing-ieeex-cloudintro-x-0)| 4 weeks | 1 hour/week

### Math (Linear Algebra)

Courses | Duration | Effort
:-- | :--: | :--:
[Coding the Matrix: Linear Algebra through Computer Science Applications](https://www.coursera.org/course/matrix)| 10 weeks | 7-10 hours/week

### Cryptography

Courses | Duration | Effort
:-- | :--: | :--:
[Cryptography I](https://www.coursera.org/course/crypto)| 6 weeks | 5-7 hours/week
[Cryptography II](https://www.coursera.org/course/crypto2)| 6 weeks | 6-8 hours/week

### Security

Courses | Duration | Effort
:-- | :--: | :--:
[Introduction to Cyber Security](https://www.futurelearn.com/courses/introduction-to-cyber-security) | 8 weeks | 3 hours/week

### Compilers

Courses | Duration | Effort
:-- | :--: | :--:
[Compilers](https://www.coursera.org/course/compilers)| 9 weeks | 6-8 hours/week

### Parallel Computing

Courses | Duration | Effort
:-- | :--: | :--:
[Heterogeneous Parallel Programming](https://www.coursera.org/course/hetero)| 11 weeks | 8-10 hours/week

### UX Design

Courses | Duration | Effort
:-- | :--: | :--:
[UX Design for Mobile Developers](https://www.udacity.com/course/ux-design-for-mobile-developers--ud849)| 6 weeks | 6 hours/week

### Computer Graphics

Courses | Duration | Effort
:-- | :--: | :--:
[Computer Graphics](https://www.edx.org/course/computer-graphics-uc-san-diegox-cse167x)| 6 weeks | 12 hours/week

### Artificial Intelligence

Courses | Duration | Effort
:-- | :--: | :--:
[Artificial Intelligence](https://www.edx.org/course/artificial-intelligence-uc-berkeleyx-cs188-1x#!)| 12 weeks | 15 hours/week

### Machine Learning

Courses | Duration | Effort
:-- | :--: | :--:
[Machine Learning](https://www.coursera.org/learn/machine-learning)| 11 weeks | 4-6 hours/week

### Natural Language Processing

Courses | Duration | Effort
:-- | :--: | :--:
[Natural Language Processing](https://www.coursera.org/course/nlangp)| 10 weeks | 8-10 hours/week

### Big Data

Courses | Duration | Effort
:-- | :--: | :--:
[Introduction to Big Data](https://www.coursera.org/learn/intro-to-big-data)| 3 weeks | 5-6 hours/week

### Data Mining

Courses | Duration | Effort
:-- | :--: | :--:
[Pattern Discovery in Data Mining](https://www.coursera.org/course/patterndiscovery) | 4 weeks | 4-6 hours/week

### Internet of Things

Courses | Duration | Effort
:-- | :--: | :--:
[The Internet of Things](https://www.futurelearn.com/courses/internet-of-things)| 4 weeks | 2 hours/week

### Specializations

After finishing the courses above, start your specializations on the topics that you have more interest.

The following platforms currently offer specializations:

#### edX: [xSeries](https://www.edx.org/xseries)
#### Coursera: [Specializations](https://www.coursera.org/specializations)
#### Udacity: [Nanodegree](https://www.udacity.com/nanodegree)
#### FutureLearn: [Collections](https://www.futurelearn.com/courses/collections)

![keep learning](http://i.imgur.com/REQK0VU.jpg)

## How to use this guide

### Order of the classes

This guide was developed to be consumed in a linear approach. What does this mean? That you should complete one course at a time.

The courses are **already** in the order that you should complete them. Just start in the [Introduction to Computer Science](#introduction-to-computer-science) section and after finishing the first course, start the next one.

**If the course isn't open, do it anyway with the resources from the previous class.**

### Should I take all courses?

**Yes!** The intention is to conclude **all** the courses listed here!

### Duration of the project

It may take longer to complete all of the classes compared to a  regular CS course, but I can **guarantee** you that your **reward** will be proportional to **your motivation/dedication**!

You must focus on your **habit**, and **forget** about goals. Try to invest 1 ~ 2 hours **every day** studying this curriculum. If you do this, **inevitably** you'll finish this curriculum.

> See more about "Commit to a process, not a goal" [here](http://jamesclear.com/goals-systems).

### Project Based

Here in **OSS University**, you do **not** need to take exams, because we are focused on **real projects**!

In order to show for everyone that you **successfully** finished a course, you should create a **real project**.

> "What does it mean?"

After finish a course, you should think about a **real world problem** that you can solve using the acquired knowledge in the course. You don't need to create a big project, but you must create something to **validate** and **consolidate** your knowledge, and also to show to the world that you are capable to create something useful with the concepts that you learned.

The projects of all students will be listed in [this](https://github.com/open-source-society/help/blob/master/PROJECTS.md) file. Submit your project's information in that file after you conclude it.

**You can create this project alone or with other students!**
