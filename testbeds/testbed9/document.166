Data exchange is the process of taking data structured under a source schema and actually transforming it into data structured under a target schema, so that the target data is an accurate representation of the source data. Data exchange is similar to the related concept of data integration except that data is actually restructured (with possible loss of content) in data exchange. There may be no way to transform an instance given all of the constraints. Conversely, there may be numerous ways to transform the instance (possibly infinitely many), in which case a "best" choice of solutions has to be identified and justified.


== Single-domain data exchange ==
Often there are a few dozen different source and target schema (proprietary data formats) in some specific domain. Often people develop a exchange format or interchange format for some single domain, and then write a few dozen different routines to (indirectly) translate each and every source schema to each and every target schema by using the interchange format as an intermediate step. That requires a lot less work than writing and debugging the hundreds of different routines that would be required to directly translate each and every source schema directly to each and every target schema. (For example, Standard Interchange Format for geospatial data, Data Interchange Format for spreadsheet data, GPS eXchange Format or Keyhole Markup Language for indicating GPS coordinates on the globe, Quicken Interchange Format for financial data, GDSII for integrated circuit layout, etc.)


== Data exchange languages ==
A data exchange language is a language that is domain-independent and can be used for any kind of data. Its semantic expression capabilities and qualities are largely determined by comparison with the capabilities of natural languages. The term is also applied to any file format that can be read by more than one program, including proprietary formats such as Microsoft Office documents. However, a file format is not a real language as it lacks a grammar and vocabulary.
Practice has shown that certain types of formal languages are better suited for this task than others, since their specification is driven by a formal process instead of a particular software implementation needs. For example, XML is a markup language that was designed to enable the creation of dialects (the definition of domain-specific sublanguages) and a popular choice now in particular on the internet. However, it does not contain domain specific dictionaries or fact types. Beneficial to a reliable data exchange is the availability of standard dictionaries-taxonomies and tools libraries such as parsers, schema validators and transformation tools.


=== Popular languages used for data exchange ===
The following is a partial list of popular generic languages used for data exchange in multiple domains.
Nomenclature
Schemas - Whether the language definition is available in a computer interpretable form.
Flexible - Whether the language enables extension of the semantic expression capabilities without modifying the schema.
Semantic verification - Whether the language definition enables semantic verification of the correctness of expressions in the language.
Dictionary-Taxonomy - Whether the language includes a dictionary and a taxonomy (subtype-supertype hierarchy) of concepts with inheritance.
Synonyms and homonyms - Whether the language includes and supports the use of synonyms and homonyms in the expressions.
Dialecting - Whether the language definition is available in multiple natural languages or dialects.
Web or ISO standard - Organization that endorsed the language as a standard.
Transformations - Whether the language includes a translation to other standards.
Lightweight - Whether a lightweight version is available, in addition to a full version.
Human readable - Whether expressions in the language are readable by humans without training.
Compatibility - Which other tools are possible or required when using the language.
Notes:
^ RDF is a schema flexible language.
^ The schema of XML contains a very limited grammar and vocabulary.
^ Available as extension.
^ in the default format, not the compact syntax.
^ the syntax is fairly simple (the language was designed to be human readable); the dialects may require domain knowledge.
^ the standardized fact types are denoted by standardized English phrases, which interpretation and use needs some training.
^ the Parse dialect is used to specify, validate, and transform dialects.
^ the English version includes a Gellish English Dictionary-Taxonomy that also includes standardized fact types (= kinds of relations).


=== XML for data exchange ===
The popularity of XML for data exchange on the World Wide Web has several reasons. First of all, it is closely related to the preexisting standards Standard Generalized Markup Language (SGML) and Hypertext Markup Language (HTML), and as such a parser written to support these two languages can be easily extended to support XML as well. For example, XHTML has been defined as a format that is formal XML, but understood correctly by most (if not all) HTML parsers. This led to quick adoption of XML support in web browsers and the toolchains used for generating web pages.


=== JSON for data exchange ===
Actually a part of the JavaScript programming language, the JSON (JavaScript Object Notation) was split out into a low-level format for structured data exchange. While it was originally not designed for data exchange at all, it was discovered to be useful. In contrast to XML above, there exist no schema definition and no support for dialecting. The key benefits of this language are the low overhead (the amount of data needed for structuring) compared to XML and the similarly wide support: every web browser that has JavaScript support can also process JSON.


=== YAML for data exchange ===
YAML is a language that was designed to be human-readable (and as such to be easy to edit with any standard text editor). Its notion often is similar to reStructuredText or a Wiki syntax, who also try to be readable both by humans and computers. YAML 1.2 also includes a shorthand notion that is compatible with JSON, and as such any JSON document is also valid YAML; this however does not hold the other way.


=== REBOL for data exchange ===
REBOL is a language that was designed to be human-readable and easy to edit using any standard text editor. To achieve that it uses a simple free-form syntax with minimal punctuation, and a rich set of datatypes. REBOL datatypes like URLs, e-mails, date and time values, tuples, strings, tags, etc. respect the common standards. REBOL is designed to not need any additional meta-language, being designed in a metacircular fashion. The metacircularity of the language is the reason why e.g. the Parse dialect used (not exclusively) for definitions and transformations of REBOL dialects is also itself a dialect of REBOL. REBOL was used as a source of inspiration by the designer of JSON.


=== Gellish for data exchange ===
Gellish English is a formalized subset of natural English, which includes a simple grammar and a large extensible English Dictionary-Taxonomy that defines the general and domain specific terminology (terms for concepts), whereas the concepts are arranged in a subtype-supertype hierarchy (a Taxonomy), which supports inheritance of knowledge and requirements. The Dictionary-Taxonomy also includes standardized fact types (also called relation types). The terms and relation types together can be used to create and interpret expressions of facts, knowledge, requirements and other information. Gellish can be used in combination with SQL, RDF/XML, OWL and various other meta-languages. The Gellish standard is being adopted as ISO 15926-11.


== See also ==
Atom (file format)
Lightweight markup language
RSS


== References ==