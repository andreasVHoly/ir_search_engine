Apache_Beehive
'''Apache Beehive''' is a discontinued Java Application Framework that was designed to simplify the development of  based applications. It makes use of various open-source projects at  such as . It leverages innovations in Java 5 which include , which is a facility for annotating fields, methods and classes so that they can be treated in special ways by runtime tools. It builds on the framework developed for   Workshop for its 8.1 series. BEA later decided to donate the code to Apache.
==History==
Version 8.1 of BEA's Weblogic Workshop includes a number of significant enhancements to version 7.0. The previous version was more focused on creating industrial-strength  quickly. However, 7.0 did not have many customers, and it failed to create a stir in the market. However, for version 8.1, BEA created a whole new  which helped programmers to develop  based applications more quickly. This was significantly better than 7.0 with more advanced features and also won several awards and gained a lot of critical acclaim. However, a new revolution was brewing in the  universe in the form of  and it seemed like everyone was moving towards it. Although Workshop 8.1 did not succeed as much as it intended to, the Weblogic Workshop Framework which was developed for 8.1 version Workshop was recognized as a good solid framework. In order that it can be used with other  based application servers, BEA decided to open-source the project under the purview of the .
Latest version of Beehive was released in December 4, 2006; its lifetime has ended in January 2010, when it has been retired and moved to .
==Beehive components==
===Netui Page Flows===
This is an application framework built on top of  which allows easier tooling and automatic updating of the various Struts configuration files.
===Controls===
This is the heart of the Beehive framework. A control can be defined as a program which can be used by the developer to quickly gain access to enterprise-level resources such as  (EJBs),  etc. For example consider accessing an old  bean. It involved a lot of boiler-plate code like getting access to an home interface, then creating/finding an EJB using finder methods and then accessing the remote methods of the bean. Using a control simplified this because it did most of the boiler-plate or routine coding for the developer, who could then concentrate more on business logic rather than worrying about the inner-details of  technology. If the developer was sufficiently advanced, even then it was useful because then the developer could concentrate on more useful things like constructing a  to a complex set of application APIs. In essence a control to a legacy EJB 2 bean ensured that the developer could simply use the control and call any business method of the EJB, using it in the same way as any other  class. When EJB 3 came around, such simplification was already provided by the EJB specification itself,"This release made it much easier to write EJBs, using 'annotations' rather than the complex 'deployment descriptors' used in version 2.x. The use of home and remote interfaces and the ejb-jar.xml file were also no longer required..." "Enterprise Java Beans (EJB) 3.0 is a deep overhaul and simplification of the EJB specification." http://www.jboss.org/ejb3"... the heavyweight programming paradigm in EJB 2.x, the flawed persistence model in EJB 2.x entity beans..." "In our view, one of the most important changes in EJB 3.1 is the redefinition of EJBs as simple managed bean POJOs with additional services."  http://blog.caucho.com/?p=384 and Beehive controls were of little further use here."... the EJB 3 client model has essentially standardized much of the value-add that the  EJB control offered in terms of simplifying the EJB 2.1 client model" http://markmail.org/message/mh43akcleflzes3rAndre McCulloch, "OK, these are great points that lead me to believe that and  EJB3 control does not provide much value add for Beehive right now." http://markmail.org/message/ktec5f4gsbw22ijb The Controls come with a standard set of controls wiz EJB Control, Webservice Control, Database Control and JMS Control. Custom controls can also be developed which in turn could make use of the controls already built-in.
===Webservices===
This is the third component of Beehive and it enables a developer to create webservices using meta-data/annotations quickly. In essence by using meta-data/annotations one can create complex  utilizing features like conversation, state etc quickly and since all the meta-data/annotations are in one file, it is easier to debug and maintain. Using this approach any plain Java class can be converted into a web service just by the addition of annotations into the Java source files. This is based on  which builds on .
==See also==
==References==
==Bibliography==
*
==External links==
*
*
* (An Eclipse plugin for Apache Beehive, now  and inactive)