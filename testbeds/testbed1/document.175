Autoconf
'''GNU Autoconf''' is a tool for producing  for building, installing and packaging software on computer systems where a  is available.
Autoconf is agnostic about the programming languages used, but it is often used for projects using , , , Fortran 77,  or .
A configure script configures a software package for  on a particular target system.  After running a series of tests on the target system, the configure script generates  and a  from templates, thus customizing the software package for the target system.  Together with  and , Autoconf forms the , which comprises several other tools, notably Autoheader.
== Usage overview ==
The developer specifies the desired behaviour of the configure script by writing a list of instructions in the  language in a file called "configure.ac".  A library of pre-defined m4  is available to describe common configure script instructions.  Autoconf transforms the instructions in "configure.ac" into a portable configure script.
The system that will be doing the building need not have autoconf installed: autoconf is needed only to build the configure script, that is usually shipped with the software.
=== configure.ac format ===
The GNU Autoconf manual suggests the following format for the configure.ac file:
; AC_PREREQ(''version'')
: The AC_PREREQ(''version'') macro can be used to ensure that a recent enough version of the autoconf program is available to process the configure.ac file
; AC_INIT(''package'', ''version'', ''bug-report-address'')
: This macro is required in every configure.ac file.  It specifies the name and version of the software package for which to generate a configure script and the email address of the developer.
; information on the package
; checks for programs
; checks for libraries
; checks for header files
; checks for types
; checks for structures
; checks for compiler characteristics
; checks for library functions
; checks for system services
; AC_CONFIG_FILES()
; AC_OUTPUT
== History ==
Autoconf was begun in the summer of 1991 by David Mackenzie to support his work at the .  In the subsequent years it grew to include enhancements from a variety of authors and became the most widely used build configuration system for writing portable free or open-source software.
== Approach ==
Autoconf is similar to the  package used by .  The  system formerly used by the  (up to X11R6.9) is closely related, but has a different philosophy.
The Autoconf approach to  is to test for s, not for . For example, the native C compiler on SunOS 4 did not support . However, it is possible for the user or administrator to have installed an ISO C-compliant compiler.  A pure version-based approach would not detect the presence of the ISO C compiler, but a feature-testing approach would be able to discover the ISO C compiler the user had installed. The rationale of this approach is to gain the following advantages:
* the configure script can get reasonable results on newer or unknown systems
* it allows s to customize their machines and have the configure script take advantage of the customizations
* there is no need to keep track of minute details of versions, patch numbers, etc., to figure out whether a particular feature is supported or not
==Criticism==
There is some criticism that states that Autoconf uses dated technologies, has a lot of legacy restrictions, and complicates simple scenarios unnecessarily for the author of ''configure.ac'' scripts. In particular, often cited weak points of Autoconf are:
* General complexity of used architecture, most projects use multiple repetitions.
* Generated 'configure' is written in  and thus Makefile generation is slow.
* Some people think that 'configure' scripts generated by autoconf provide only manual-driven command-line interface without any standardization. While it is true that some developers do not respect common conventions, such conventions do exist and are widely used.
* M4 is unusual and unknown to many developers. Developers will need to learn it to extend autoconf with non-standard checks.
* Weak backward and forward compatibility requires a wrapper script.
* Autoconf-generated scripts are usually large and rather complex. Although they produce extensive logging, debugging them can still be difficult.
Due to these limitations, several projects that used GNU Build System switched to different build systems, such as  and .http://www.blender.org/development/release-logs/blender-233/build-systems/
==See also==
*   Alternative build system
* 
* 
*   Detecting package dependencies
==References==
== External links ==
* 
* 
* 
* 
* .
* 
* 
*