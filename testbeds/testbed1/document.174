Autocode
'''Autocode''' is the name of a family of "simplified coding systems", later called , devised in the 1950s and 1960s for a series of  s at the Universities of ,  and . Autocode was a generic term; the autocodes for different machines were not necessarily closely related as are, for example, the different versions of the single language .
Today the term is used to refer to the family of early languages descended from the  autocoder systems, which were generally similar. In the 1960s, the term '''autocoders''' was used more generically as to refer to any  using a . 
Examples of languages referred to as autocodes are  and .
== Glennie's Autocode ==
The first autocode and its compiler were developed by  in 1952 for the Mark 1 computer at the University of Manchester and is considered by some to be the first  programming language. His main goal was to make the programming of Mark 1 machine, known for its particularly abstruse machine code, comprehensible. Although the resulting language was much clearer than the machine code, it was still very machine dependent.Knuth, p. 42-43
Below is an example of Glennie's Autocode function which calculates the formula: f(t) = \sqrt + 5t^3. The example omits necessary scaling instruction needed to place integers into variables and assumes that results of multiplication fit into lower accumulator.
 c@VA t@IC x@C y@RC z@NC
 INTEGERS +5 c           # Put 5 into c
       t                 # Load argument from lower accumulator to variable t
    +t     TESTA Z        # Put |t| into lower accumulator
    -t
           ENTRY Z
 SUBROUTINE 6 z          # Run square root subroutine on lower accumulator
                          # value and put the result into z
   +tt y x              # Calculate t^3 and put it into x 
   +tx y x
 +z+cx   CLOSE WRITE 1    # Put z + (c * x) into lower accumulator and return
User's manual of Glennie's Autocode Compiler mentioned that "the loss of efficiency is no more than 10%".Knuth, p. 48
Autocode's impact on other Manchester users' programming habits was negligible. It wasn't even mentioned in Brooker's 1958 paper called "The Autocode Programs developed for the Manchester University Computers".
== Mark 1 Autocode ==
The second autocode for the Mark 1 was planned in 1954 and developed by  in 1955 and was called the "Mark 1 Autocode". The language was nearly machine-independent and had floating-point arithmetic, unlike the first one. On the other hand it allowed only one operation per line, offered few mnemonic names and had no way to define user subroutines.Knuth, p. 63-64
An example code which loads array of size 11 of floating-point numbers from the input would look like this
 1     n1 = 1         
      vn1 = I         reads input into v
       n1 = n1 + 1
    j1,11  n1        jumps to 1 if n  11
Brooker's Autocode removed two main difficulties of Mark 1's programmer: scaling and management of two-level storage. Unlike its predecessor it was heavily used.Knuth, p. 65
== Later Autocodes ==
Brooker also developed an autocode for the  in the 1950s in conjunction with the University of Manchester.
''Mercury Autocode'' had a limited repertoire of  a-z and a'-z' and, in some ways resembled early versions of the later  language.  It pre-dated , having no concept of s and hence no  or  .  In order to overcome the relatively small store size available on Mercury, large programs were written as distinct "chapters", each of which constituted an .  Some skill was required to minimise time-consuming transfers of control between chapters.  This concept of overlays from  under user control became common until  became available in later machines.  Slightly different dialects of Mercury Autocode were implemented for the  (distinct from the later ) and the  and  range.
The version for the  was devised by  of   in 1961. Known as EDSAC 2 Autocode, it was a straight development from Mercury Autocode adapted for local circumstances, and was noted for its object code optimisation and source-language diagnostics which were advanced for the time. A version was developed for the successor  (the prototype Atlas 2 computer) as a temporary stop-gap while a more substantially advanced language known as  was being developed. CPL was never completed but did give rise to  (developed by M. Richards), which in turn led to  and ultimately . A contemporary but separate thread of development,  was developed for the University of Manchester  machine.
==References==
==Sources==
* 
* 
* 
* Knuth, Donald E.; Pardo, Luis Trabb (1976). "Early development of programming languages". Stanford University, Computer Science Department.
==External links==
*