Graph Traversal
In computer science, graph traversal (also known as graph search) refers to the process of visiting (checking and/or updating) each vertex in a 
graph. Such traversals are classified by the order in which the vertices are visited. Tree traversal is a special case of graph traversal.

Unlike tree traversal, graph traversal may require that some vertices be visited more than once, since it is not necessarily known before 
transitioning to a vertex that it has already been explored. As graphs become more dense, this redundancy becomes more prevalent, causing 
computation time to increase; as graphs become more sparse, the opposite holds true.
Thus, it is usually necessary to remember which vertices have already been explored by the algorithm, so that vertices are revisited as 
infrequently as possible (or in the worst case, to prevent the traversal from continuing indefinitely). This may be accomplished by associating
each vertex of the graph with a "color" or "visitation" state during the traversal, which is then checked and updated as the algorithm visits 
each vertex. If the vertex has already been visited, it is ignored and the path is pursued no further; otherwise, the algorithm checks/updates
the vertex and continues down its current path.
Several special cases of graphs imply the visitation of other vertices in their structure, and thus do not require that visitation be 
explicitly recorded during the traversal. An important example of this is a tree, during a traversal of which it may be assumed that all 
"ancestor" vertices of the current vertex (and others depending on the algorithm) have already been visited. Both the depth-first and breadth-first 
graph searches are adaptations of tree-based algorithms, distinguished primarily by the lack of a structurally determined "root" vertex and 
the addition of a data structure to record the traversal's visitation state.

Note. â€” If each vertex in a graph is to be traversed by a tree-based algorithm (such as DFS or BFS), then the algorithm must be called at 
least once for each entirely distinct subgraph of the graph. This is easily accomplished by iterating through all the vertices of the graph,
performing the algorithm on each vertex that is still unvisited when examined.

Depth-first search
A depth-first search (DFS) is an algorithm for traversing a finite graph. DFS visits the child vertices before visiting the sibling 
vertices; that is, it traverses the depth of any particular path before exploring its breadth. A stack (often the program's call stack via recursion)
is generally used when implementing the algorithm.
The algorithm begins with a chosen "root" vertex; it then iteratively transitions from the current vertex to an adjacent, unvisited vertex, 
until it can no longer find an unexplored vertex to transition to from its current location. The algorithm then backtracks along previously 
visited vertices, until it finds a vertex connected to yet more uncharted territory. It will then proceed down the new path as it had before, 
backtracking as it encounters dead-ends, and ending only when the algorithm has backtracked past the original "root" vertex from the very first step.
DFS is the basis for many graph-related algorithms, including topological sorts and planarity testing. A topological sort (sometimes abbreviated toposort) 
or topological ordering of a directed graph is a linear ordering of its vertices such that for every directed edge uv from vertex u to vertex v, u comes 
before v in the ordering. 

A breadth-first search (BFS) is another technique for traversing a finite graph. BFS visits the neighbor vertices before visiting the child vertices, 
and a queue is used in the search process. This algorithm is often used to find the shortest path from one vertex to another.