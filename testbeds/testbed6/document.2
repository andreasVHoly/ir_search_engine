          Home 
          About 
          Courses | Fees | Dates 
          College-Projects 
          Testimonials 
          Internship 
          Developers 
          Jobs 
          Contact 
        Questions &amp; Answers 
         C Interview Questions
         C++ Questions
         Linux MCQs
         C# Quiz
         Java MCQs
         JavaScript MCQs
         SAN Questions
         PHP Questions
         Python Quiz
        Computer Science Questions 
         Operating System Quiz
         Computer Architecture MCQs
         Software Architecture MCQs
         Software Engineering MCQs
         Artificial Intelligence MCQs
         LISP Programming MCQs
         Database Management MCQs
         Computer Network MCQs
         Microprocessor MCQs
        C Programming Examples 
         Simple C Programs
         C - Arrays
         C - Matrix
         C - Strings
         C - Bitwise Operations
         C - Linked Lists
         C - Stacks &amp; Queues
         C - Searching &amp; Sorting
         C - Trees
         C - Strings
         C - File Handling
         C - Mathematical Functions
         C - Puzzles &amp; Games
         C Programs - Recursion
         C Programs - No Recursion
        Java Algorithms 
         Java - Numerical Problems
         Java - Combinatorial Problems
         Java - Graph Problems
         Java - Hard Graph Problems
         Java - Computation Geometry
         Java - Sets &amp; Strings
         Java - Data-Structures
         Java - Collection API Problems
        C++ Algorithms 
         C++ - Numerical Problems
         C++ - Combinatorial Problems
         C++ - Graph Problems
         C++ - Hard Graph Problems
         C++ - Computation Geometry
         C++ - Sets &amp; Strings
         C++ - Data-Structures
         C++ - STL Library
        C Algorithms 
         C - Numerical Problems
         C - Combinatorial Problems
         C - Graph Problems
         C - Hard Graph Problems
         C - Computation Geometry
         C - Sets &amp; Strings
         C - Data-Structures
        Java Program to Implement AVL Tree  
         Posted on 
         August 13, 2013 
         by  Manish   
         This is a Java Program to implement AVL Tree. An AVL tree is a self-balancing binary search tree, and it was the first such data structure to be invented. In an AVL tree, the heights of the two child subtrees of any node differ by at most one; if at any time they differ by more than one, rebalancing is done to restore this property. Lookup, insertion, and deletion all take O(log n) time in both the average and worst cases, where n is the number of nodes in the tree prior to the operation. Insertions and deletions may require the tree to be rebalanced by one or more tree rotations. This program is based on the implementation by Mark Allen Weiss.
        Here is the source code of the Java program to implement AVL Tree. The Java program is successfully compiled and run on a Windows system. The program output is also shown below. 
               /*
               &nbsp;*  Java Program to Implement AVL Tree
               &nbsp;*/
               &nbsp;
                import java.util.Scanner;
               &nbsp;
                /* Class AVLNode */
                class AVLNode
                {    
                    AVLNode left, right;
                    int data;
                    int height;
               &nbsp;
                    /* Constructor */
                    public AVLNode()
                    {
                        left = null;
                        right = null;
                        data = 0;
                        height = 0;
                    }
                    /* Constructor */
                    public AVLNode(int n)
                    {
                        left = null;
                        right = null;
                        data = n;
                        height = 0;
                    }     
                }
               &nbsp;
                /* Class AVLTree */
                class AVLTree
                {
                    private AVLNode root;     
               &nbsp;
                    /* Constructor */
                    public AVLTree()
                    {
                        root = null;
                    }
                    /* Function to check if tree is empty */
                    public boolean isEmpty()
                    {
                        return root == null;
                    }
                    /* Make the tree logically empty */
                    public void makeEmpty()
                    {
                        root = null;
                    }
                    /* Function to insert data */
                    public void insert(int data)
                    {
                        root = insert(data, root);
                    }
                    /* Function to get height of node */
                    private int height(AVLNode t )
                    {
                        return t == null ? -1 : t.height;
                    }
                    /* Function to max of left/right node */
                    private int max(int lhs, int rhs)
                    {
                        return lhs &gt; rhs ? lhs : rhs;
                    }
                    /* Function to insert data recursively */
                    private AVLNode insert(int x, AVLNode t)
                    {
                        if (t == null)
                            t = new AVLNode(x);
                        else if (x &lt; t.data)
                        {
                            t.left = insert( x, t.left );
                            if( height( t.left ) - height( t.right ) == 2 )
                                if( x &lt; t.left.data )
                                    t = rotateWithLeftChild( t );
                                else
                                    t = doubleWithLeftChild( t );
                        }
                        else if( x &gt; t.data )
                        {
                            t.right = insert( x, t.right );
                            if( height( t.right ) - height( t.left ) == 2 )
                                if( x &gt; t.right.data)
                                    t = rotateWithRightChild( t );
                                else
                                    t = doubleWithRightChild( t );
                        }
                        else
                          ;  // Duplicate; do nothing
                        t.height = max( height( t.left ), height( t.right ) ) + 1;
                        return t;
                    }
                    /* Rotate binary tree node with left child */     
                    private AVLNode rotateWithLeftChild(AVLNode k2)
                    {
                        AVLNode k1 = k2.left;
                        k2.left = k1.right;
                        k1.right = k2;
                        k2.height = max( height( k2.left ), height( k2.right ) ) + 1;
                        k1.height = max( height( k1.left ), k2.height ) + 1;
                        return k1;
                    }
               &nbsp;
                    /* Rotate binary tree node with right child */
                    private AVLNode rotateWithRightChild(AVLNode k1)
                    {
                        AVLNode k2 = k1.right;
                        k1.right = k2.left;
                        k2.left = k1;
                        k1.height = max( height( k1.left ), height( k1.right ) ) + 1;
                        k2.height = max( height( k2.right ), k1.height ) + 1;
                        return k2;
                    }
                    /**
               &nbsp;     * Double rotate binary tree node: first left child
               &nbsp;     * with its right child; then node k3 with new left child */
                    private AVLNode doubleWithLeftChild(AVLNode k3)
                    {
                        k3.left = rotateWithRightChild( k3.left );
                        return rotateWithLeftChild( k3 );
                    }
                    /**
               &nbsp;     * Double rotate binary tree node: first right child
               &nbsp;     * with its left child; then node k1 with new right child */      
                    private AVLNode doubleWithRightChild(AVLNode k1)
                    {
                        k1.right = rotateWithLeftChild( k1.right );
                        return rotateWithRightChild( k1 );
                    }    
                    /* Functions to count number of nodes */
                    public int countNodes()
                    {
                        return countNodes(root);
                    }
                    private int countNodes(AVLNode r)
                    {
                        if (r == null)
                            return 0;
                        else
                        {
                            int l = 1;
                            l += countNodes(r.left);
                            l += countNodes(r.right);
                            return l;
                        }
                    }
                    /* Functions to search for an element */
                    public boolean search(int val)
                    {
                        return search(root, val);
                    }
                    private boolean search(AVLNode r, int val)
                    {
                        boolean found = false;
                        while ((r != 
