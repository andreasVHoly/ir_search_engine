In computer science, binary search trees (BST), sometimes called ordered or sorted binary trees, 
are a particular type of containers: data structures that store "items" (such as numbers, names etc.)
in memory. They are a type of data structure that allow fast lookup, addition and removal of items, 
and can be used to implement either dynamic sets of items, or lookup tables that allow finding an 
item by its key (e.g., finding the phone
number of a person by name).
Binary search trees keep their keys in sorted order, so that lookup and other operations can use the 
principle of binary search: when looking for a key in a tree (or a place to insert a new key), they 
traverse the tree from root to leaf, making comparisons to keys stored in the nodes of the tree and 
deciding, based on the comparison, to continue searching in the left or right subtrees. On average, 
this means that each comparison allows the operations to skip about half of the tree, so that each lookup,
insertion or deletion takes time proportional to the logarithm of the number of items stored in the tree.
This is much better than the linear time required to find items by key in an (unsorted) array, but slower
than the corresponding operations on hash tables.
Other types of data stuctures include: 
Linked lists, Priority Queue Hahs tables, AVL trees, Graphs among others.

Once the binary search tree has been created, its elements can be retrieved in-order by recursively traversing 
the left subtree of the root node, accessing the node itself, then recursively traversing the right subtree of 
the node, continuing this pattern with each node in the tree as it's recursively accessed. As with all binary 
trees, one may conduct a pre-order traversal or a post-order traversal, but neither are likely to be useful for
binary search trees. An in-order traversal of a binary search tree will always result in a sorted list of node
items (numbers, strings or other comparable items).
