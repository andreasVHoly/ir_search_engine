Java Data Structures (2nd edition)
Welcome to Java Data Structures (2nd edition). This document was created with an intent to show people how easy Java really is, and to clear up a few things I've missed in the previous release of the document. 
This is a growing document  as new features are added to the language, new techniques are discovered or realized, this document shall be updated to try to accommodate them all. If you have suggestions, or requests, (or spelling/grammar errors) just e-mail them, and I'll try to add the suggested topics into the subsequent release. Because this document is changing so much, I've decided to implement a version number. This release is: v2.2.11, updated: May 7th, 2002. 
Of course, this document is free, and I intend to keep it that way. Selling of this document is NOT permitted. You WILL go to hell if you do (trust me). (not that anybody would want to buy it...) You may distribute this document (in ANY form), provided you don't change it. (yes, you CAN include it in a book provided you notify me and give me credit &lt and give me one free copy of the book&gt ) To my knowledge, this document has already been reproduced and distributed within some corporations, schools and colleges, but has yet to be formally published in a book. 
I take no responsibility for ANYTHING. I am only responsible for all the good things you like about the article. So, remember, if it's bad, don't blame me, if it's good, thank me (give me credit). 
All the source has been compiled and tested using JDK v1.2. Although most things should work flawlessly with previous versions, there are things where JDK 1.2 is more appropriate. If you find problems and/or errors, please let me know. 
Although this document should be read in sequence, it is divided into several major sections, here they are: 
Variables Arrays Array Stack Array Queue Array List The Vector  Nodes  Linked Lists Reusing Tricks  Trees Generic Tree Comparing Objects Binary Search Trees Tree Traversals  Node Pools Node Pool Nodes Node Pool Generic Trees Node Pool Sort Trees  Priority Vectors Sorting Sorting JDK 1.2 Style Sorting using Quicksort Optimizing Quicksort Radix Sort Improving Radix Sort  Reading and Writing Trees (Serialization) Deleting items from a Binary Search Tree Determining Tree Depth  Advanced Linked Lists Doubly Linked Lists (with Enumeration)  Binary Space Partition Trees (BSP) Binary Space Partition Tree DEMO (Dog 3D) Binary Space Partition Tree DEMO with Lighting (Dog 3D)  Kitchen Sink Methods Java Native Interface (JNI)  Bibliography Special Thanks Contact Info 
In contrast to what most people think about Java, it being a language with no pointers, data structures are quite easy to implement. In this section, I'll demonstrate few basic data structures. By learning how easy they are to implement in Java, you'll be able to write any implementation yourself. I also think that this document is a pretty good introduction to Data Structures in general. All these concepts can be applied in any programming language. Incidentally, most of these programs are ported from their C++ counterparts. So, if you want to learn Data Structures in C/C++, you'll still find this document useful! Java is an Object Oriented language, but more so than C++, so, most data structure concepts are expressed and illustrated "more naturally" in Java! (try not to raise your blood pressure from all the caffeine) I suggest that you be familiar with Java format, and know some other programming language in advance. Coincidentally, I and a couple of my friends are in the process of writing a C language book, which deals with all that "start up" stuff.        The way most examples are executed is through the JDK's command line Java interpreter. (at the prompt, you just type "java" and the name of the class to run.) 

Variables
Variables are the key to any program. There are variables called registers inside every CPU (Central Processing Unit). Every program ever written uses some form of variables. Believe it or not, the way you use variables can significantly impact your program. This section is a very simple introduction to what variables are, and how they're used in programs. Usually, a variable implies a memory location to hold one instance of one specific type. What this means is that if there is an integer variable, it can only hold one integer, and if there is a character variable, it can only hold one character.        
