Introduction To Algorithms - Balanced Trees: Avl Trees
May 04, 2010 | 0 Comments

The first balanced binary tree in computing history was the AVL tree which introduced the wide area of balanced binary search trees. An AVL tree is a binary search tree which has an additional balanced condition(yes, that's the only extra addition). Balanced condition of the AVL tree ensures the depth of the tree is O(log n) which ensures the depth of the tree is logarithmic. The height of the left and right subtrees can differ at most 1.

Search, insert, and deletion operations of the AVL tree take O(log n) time in both average and worst-cases whereas in a binary search tree, these operations' worst-cases take O(n) time.

The height of an AVL tree satisfies

H < 1.44 log2(n+2)-1

whereas a Red-Black tree's height satisfies

2 log2(n+1)

so an AVL tree is faster than a Red-Black tree when it comes to retrieval of an item but slower in insertion and deletion.

The challenge with the AVL tree happens when we try to insert, and remove from the tree. The reason is simple; such operation can destroy the balance of several nodes. Additionally when we rotate the tree to update the balance information, we may find a new node whose balance violates the definition of the AVL tree.

Rotation
Before beginning to rotation, we need the following helper functions to identify the height of the node, and the maximum value of the sub-trees.

/* return the height of the node. */
int height(Node root) {
  return root == null ? -1 : root.getHeight();
}

/* 
  * return the maximum value.
  * or just use Math.max()
*/
int max(int left, int right) {
  left > right ? left : right;
}
Let's begin with the single rotations.

Left Rotation
Assume we have the following tree.

1
 \
  2
   \
    3
In this example the node 1 violates the AVL balance property because its right subtree is two levels deeper than its left side. To fix this, we need to perform left-rotation as follows;

2 becomes the new root
1 becomes 2's left child.
   2
 /  \
1    3
If we write this as a Java snippet;

Node rotateLeftChild(Node root) {
  Node temp = root.getLeft();
  root.setLeft(temp.getRight());
  temp.setRight(root);
  root.setHeight(max(height(root.getLeft()), height(root.getRight())) + 1);
  temp.setHeight(max(height(temp.getLeft()), root.getHeight()) + 1);
  return temp;
}
Right Rotation
Right rotation is exactly the same as described in left-rotation. We just need to mirror it, obviously.

Node rotateRightChild(Node root) {
  Node temp = root.getRight();
  root.setRight(root.getLeft());
  temp.setLeft(root);
  root.setHeight(max(height(root.getLeft()), height(root.getRight())) + 1);
  temp.setHeight(max(height(temp.getRight()), root.getHeight()) + 1);
  return temp;
}
Double Rotation
The single rotation has a problem; it doesn't always balance the tree properly. If the subtree is too deep, a single rotation can't make it any less. Consider the following tree;

1
  \
    3
it's balanced but when we insert a node 2 here's what we get.

1
  \
   3
  /
2
We need to balance it, but if we just do a single-rotation, here's what we get.

  3
 /
1
  \
   2
So we failed to balance the tree with using a single-rotation. Right single-rotation would bring us where we've started. We need to perform double rotation, so we're going to perform a right rotation on the right sub-tree. We're not going to rotate the root, we're going to rotate the right child.

Node doubleRotateLeftChild(Node root) {
  root.setLeft(rotateRightChild(root.getLeft()));
  return rotateLeftChild(root);
}
The double rotation of the right child is the mirror of the double rotation of the left child as follows;

$$(lang=java) Node doubleRotateRightChild(Node root) { root.setRight(rotateLeftChild(root.getRight())); return rotateRightChild(root); } $$/code

This is a useful tutorial on AVL Tree rotation.

Insertion
After all these rotations to left and right, we're ready to insert the data to our AVL tree. I don't think it needs any description if you know what a binary search tree is and I've already explained the extra needed information above.

Node balance(Node root, int data) {
  if(height(root.getLeft()) - height(root.getRight()) == 2) {
    if(data < root.getLeft().getData())
      root = rotateLeftChild(root);
    else
      root = doubleRotateLeftChild(root);
  }
  if(height(root.getRight()) - height(root.getLeft()) == 2) {
    if(data > root.getRight().getData())
      root = rotateRightChild(root);
    else
      root = doubleRotateRightChild(root);
  }
  return root;
}

Node insert(Node root, int data) {
  if(root == null) return new Node(data);
  else if(data < root.getData()) {
    root.setLeft(insert(root.getLeft(), data));
    root = balance(root, data);
  } else if(data > root.getLeft().getData()) {
    root.setRight(insert(root.getRight(), data));
    root = balance(root, data);
  }
  root.setHeight(max(height(root.getLeft()), height(root.getRight())) + 1);
  return root;
}
Insertion takes O(log n) time both in average and worst-cases.

Searching a node, finding the minimum node and maximum node functions' implementation are exactly the same as BST's.
