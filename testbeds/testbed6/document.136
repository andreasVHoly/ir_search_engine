   GeeksforGeeks 
   A computer science portal for geeks who like data structures
     Home 
     Algo 
       Analysis of Algorithms 
       Searching and Sorting 
       Greedy Algorithms 
       Dynamic Programming 
       Pattern Searching 
       Other String Algorithms 
       Backtracking 
       Divide and Conquer 
       Geometric Algorithms 
       Mathematical Algorithms 
       Bit Algorithms 
       Graph Algorithms 
       Randomized Algorithms 
     DS 
       LinkedList 
       Stack 
       Queue 
       Binary Tree 
       Binary Search Tree 
       Heap 
       Hashing 
       Graph 
       Advanced Data Structure 
       Array 
       Matrix 
       Misc 
     Interview 
       Top Topics 
       Practice Company Questions 
       Interview Experiences 
       Experienced Interviews 
       Internship Interviews 
       Competitive Programming 
       Multiple Choice Quizzes 
     Students 
       Campus Ambassador Program 
       Geek of the Month 
       Placement Course 
       Project 
       Competitive Programming 
       Testimonials 
     C 
     C++ 
     Java 
     Python 
     Contribute 
     Ask Q 
     AndroidApp 
     GFact 
     Jobs 
       Job Seekers 
       Employers 
       Advertise with us 
       Internship 
     GBlog 
     Arr 
     String 
     Matrix 
     LinkedList 
     Stack 
     Q 
     Hash 
     Heap 
     Tree 
     BST 
     Graph 
     C/C++ 
     Bit 
     MCQ 
     Misc 
     O/P 
      Tree Traversals 
      Unlike linear data structures (Array, Linked List, Queues, Stacks, etc) which have only one logical way to traverse them, trees can be traversed in different ways. Following are the generally used ways for traversing trees.  
      Depth First Traversals: (a) Inorder (b) Preorder (c) Postorder 
      Breadth First or Level Order Traversal Please see this post for Breadth First Traversal. 
      Inorder Traversal:  
Algorithm Inorder(tree)
   1. Traverse the left subtree, i.e., call Inorder(left-subtree)
   2. Visit the root.
   3. Traverse the right subtree, i.e., call Inorder(right-subtree)
      Uses of Inorder In case of binary search trees (BST), Inorder traversal gives nodes in non-decreasing order. To get nodes of BST in non-increasing order, a variation of Inorder traversal where Inorder itraversal s reversed, can be used. 3.  Preorder Traversal:  
Algorithm Preorder(tree)
   1. Visit the root.
   2. Traverse the left subtree, i.e., call Preorder(left-subtree)
   3. Traverse the right subtree, i.e., call Preorder(right-subtree)
      Uses of Preorder Preorder traversal is used to create a copy of the tree. Preorder traversal is also used to get prefix expression on of an expression tree. 
Postorder Traversal:  
Algorithm Postorder(tree)
   1. Traverse the left subtree, i.e., call Postorder(left-subtree)
   2. Traverse the right subtree, i.e., call Postorder(right-subtree)
   3. Visit the root.
      Uses of Postorder Postorder traversal is used to delete the tree. Please see the question for deletion of tree  for details. Postorder traversal is also useful to get the postfix expression of an expression tree. 

// C program for different tree traversals
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
/* A binary tree node has data, pointer to left child
   and a pointer to right child */
struct node
{
     int data;
     struct node* left;
     struct node* right;
};
/* Helper function that allocates a new node with the
   given data and NULL left and right pointers. */
struct node* newNode(int data)
{
     struct node* node = (struct node*)
                                  malloc(sizeof(struct node));
     node-&gt;data = data;
     node-&gt;left = NULL;
     node-&gt;right = NULL;
     return(node);
}
/* Given a binary tree, print its nodes according to the
  "bottom-up" postorder traversal. */
void printPostorder(struct node* node)
{
     if (node == NULL)
        return;
     // first recur on left subtree
     printPostorder(node-&gt;left);
     // then recur on right subtree
     printPostorder(node-&gt;right);
     // now deal with the node
     printf("%d ", node-&gt;data);
}
/* Given a binary tree, print its nodes in inorder*/
void printInorder(struct node* node)
{
     if (node == NULL)
          return;
     /* first recur on left child */
     printInorder(node-&gt;left);
     /* then print the data of node */
     printf("%d ", node-&gt;data);  
     /* now recur on right child */
     printInorder(node-&gt;right);
}
/* Given a binary tree, print its nodes in preorder*/
void printPreorder(struct node* node)
{
     if (node == NULL)
          return;
     /* first print data of node */
     printf("%d ", node-&gt;data);  
     /* then recur on left sutree */
     printPreorder(node-&gt;left);  
     /* now recur on right subtree */
     printPreorder(node-&gt;right);
}    
/* Driver program to test above functions*/
int main()
{
     struct node *root  = newNode(1);
     root-&gt;left             = newNode(2);
     root-&gt;right           = newNode(3);
     root-&gt;left-&gt;left     = newNode(4);
     root-&gt;left-&gt;right   = newNode(5); 
     printf("\nPreorder traversal of binary tree is \n");
     printPreorder(root);
     printf("\nInorder traversal of binary tree is \n");
     printInorder(root);  
     printf("\nPostorder traversal of binary tree is \n");
     printPostorder(root);
     getchar();
     return 0;
}
   
