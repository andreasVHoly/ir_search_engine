Now that we have examined the basic functionality of our tree data structure, it is time to look at some additional usage patterns for trees. These
usage patterns can be divided into the three ways that we access the nodes of the tree. There are three commonly used patterns to visit all the 
nodes in a tree. The difference between these patterns is the order in which each node is visited. We call this visitation of the nodes a “traversal.”
The three traversals we will look at are called preorder, inorder, and postorder. Let’s start out by defining these three traversals more carefully, 
then look at some examples where these patterns are useful.

preorder
In a preorder traversal, we visit the root node first, then recursively do a preorder traversal of the left subtree, followed by a recursive preorder 
traversal of the right subtree.
inorder
In an inorder traversal, we recursively do an inorder traversal on the left subtree, visit the root node, and finally do a recursive inorder traversal
of the right subtree.
postorder
In a postorder traversal, we recursively do a postorder traversal of the left subtree and the right subtree followed by a visit to the root node. 

def preorder(tree):
    if tree:
        print(tree.getRootVal())
        preorder(tree.getLeftChild())
        preorder(tree.getRightChild())

		
def postorder(tree):
    if tree != None:
        postorder(tree.getLeftChild())
        postorder(tree.getRightChild())
        print(tree.getRootVal())

def inorder(tree):
  if tree != None:
      inorder(tree.getLeftChild())
      print(tree.getRootVal())
      inorder(tree.getRightChild())

Traversing AVL trees requires 	  