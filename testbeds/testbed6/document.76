The topological sort algorithm creates a linear ordering of the vertices such that if edge (u,v) appears in the graph, then v comes before u in the ordering. The graph must be a directed acyclic graph (DAG). The implementation consists mainly of a call to depth_first_search().  
Where Defined: 
boost/graph/topological_sort.hpp 
Parameters IN: 
VertexListGraph&amp; g 
  A directed acylic graph (DAG). The graph type must be a model of Vertex List Graph and Incidence Graph. If the graph is not a DAG then a 
 not_a_dag exception will be thrown and the user should discard the contents of result range.
 Python: The parameter is named 
 graph. 
 OUT: 
OutputIterator result 
  The vertex descriptors of the graph will be output to the 
 result output iterator in 
 reverse topological order. The iterator type must model 
 Output Iterator.
 Python: This parameter is not used in Python. Instead, a Python 
 list containing the vertices in topological order is returned. 
Named Parameters UTIL/OUT: 
color_map(ColorMap color) 
  This is used by the algorithm to keep track of its progress through the graph. The type 
 ColorMap must be a model of 
 Read/Write Property Map and its key type must be the graph's vertex descriptor type and the value type of the color map must model 
 ColorValue.
 Default: an terator_property_map created from a std::vector of 
 default_color_type of size num_vertices(g) and using the i_map for the index map.
 Python: The color map must be a 
 vertex_color_map for the graph. 
 IN: 
vertex_index_map(VertexIndexMap i_map) 
 This maps each vertex to an integer in the range [0, num_vertices(g)). This parameter is only necessary when the default color property map is used. The type 
 VertexIndexMap must be a model of 
 Readable Property Map. The value type of the map must be an integer type. The vertex descriptor type of the graph needs to be usable as the key type of the map.
 Default: 
 get(vertex_index, g) Note: if you use this default, make sure your graph has an internal vertex_index property. For example, 
 adjacenty_list with VertexList=listS does not have an internal vertex_index property. Python: Unsupported parameter. 
Complexity The time complexity is O(V + E). 


