Depth-first search
Depth-first search (DFS) is an algorithm for traversing or searching tree or graph data structures. One starts at the root 
selecting some arbitrary node as the root in the case of a graph) and explores as far as possible along each branch before
backtracking.

A version of depth-first search was investigated in the 19th century by French mathematician Charles Pierre Tr√©maux as a strategy for solving mazes.
DFS is mainly used for graph and treee traversal. 

A convenient description of a depth first search of a graph is in terms of a spanning tree of the vertices reached during the search. Based on this spanning tree, the edges of the original graph can be divided into three classes: forward edges, which point from a node of the tree to one of its descendants, back edges, which point from a node to one of its ancestors, and cross edges, which do neither. Sometimes tree edges, edges which belong to the spanning tree itself, are classified separately from forward edges. If the original graph is undirected then all of its edges are tree edges or back edges.

Algorithms that use depth-first search as a building block include:
Finding connected components.
Topological sorting.
Finding 2-(edge or vertex)-connected components.
Finding 3-(edge or vertex)-connected components.
Finding the bridges of a graph.
Generating words in order to plot the Limit Set of a Group.
Finding strongly connected components.
Planarity testing[7][8]
Solving puzzles with only one solution, such as mazes. (DFS can be adapted to find all solutions to a maze by only including nodes on the current path in the visited set.)
Maze generation may use a randomized depth-first search.
Finding biconnectivity in graphs.
