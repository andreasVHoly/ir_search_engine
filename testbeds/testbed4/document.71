Convex polygon ?	triangles	Inside / outside polygon 1
 
 
Repeat	Convex polygon.

Pick three succeeding points; Join the outside ones with a line;

Check 

 a if point

C 

 is inside

 or 

outside

 a convex 





polygon in the 
, 

yx
 


Remove the middle point

plane.

Until three points are left over
C
 
 
Puzzle: Which sequence of points to pick?

H&B 4-7:84-94

H&B 4-7:84-94
 
 
 
 
 
 
 
 
 

Inside / outside polygon 2

Inside / outside polygon 3

Point

C 

 is inside



 a convex  
polygon 

•General: 	odd-even rule

all if

Q

 have




 the

same  


iz

sign,

-Draw a line from 	C to a point far away. If the 

with 
Q








?

-
C. 
(P

×

(P

-

C)
.

i

i

?

1i

number of crossings with the boundary is odd, 
then C	is inside the polygoon.

C	C	C	C	C
P	i	P	?1i	P	i	P	?1i

H&B 4-7:84-94

H&B 4-7:84-94
 
 
 
 
 
 
 
 
 

Storage polygons 1

Storage polygons 2

•Mesh:
-Vertices -Edges -Faces
E
V V
1
1 2
E
6
V F
5
1
E E

Operations
-Draw all edges -Draw all faces -Move all vertices -Determine orientation
-...

•Simple: all polygons apart
Faces:
F
Per vertex coordinates
1.  V1, V 2, V 3
F
2.  V1, V 3, V 4, V 5
V
V
1 2
V F
5 1

2
V
3

3
E
4

F
2
E
5
V
3
V
4
H&B 4-7:84-94

F
2
V
4

H&B 4-7:84-94

 
 
 
 
 
 
 
3

 
Storage polygons 3

Storage polygons 4

•More efficient: polygons and vertices apart
Faces: Vertices:

•Also: polygons, edges and vertices apart
Faces: Edges: Vertices:

F
1.  1,2,3
F
2.  1,3,4,5

V
1.  x1, y 1, z 1
V
2.  x2, y 2, z 2

F
1.  1,2,3
F
2.  3,4,5,6

E
1.  1,2
E
2.  2,3

V
1.  x1, y 1, z 1
V
2.  x2, y 2, z 2

V
3.  x3, y 3, z 3

E

V

V E
3. 
 3,1
3. 
 x3, y 3, z 3

V
1
V
1 2
V
2
4.  x4, y 4, z 4

V
1

E

V

E
6
4. 
 3,4
4. 
 x4, y 4, z 4

F
1
F
2

V
V
F
5
5.  x5, y 5, z 5
1
E E
3 2
F
2
V
6.  x6, y 6, z 6
E

V
5

E
5.  4,5
E
6.  5,1

V
5.  x5, y 5, z 5
V
6.  x6, y 6, z 6

V V

5

3
V
4
H&B 4-7:84-94

3

E
4

V
4

H&B 4-7:84-94
 
 
 
 
 
 
 
 
 

Storage polygons 5

Storage polygons 6

•Or: keep list of neighboring faces per vertex
Faces: Vertices: Neighbor faces:
F
V
1.  1,2,3
1.  x1, y 1, z 1      1, 2

•Many other formats possible
-See f.i. 	winged edge data structure
•Select/design storage format based on:

F
2.  1,3,4,5

V

1

2.  x2, y 2, z 2

-Operations on elements;

V
3.  x3, y 3, z 3
1. 
 2

V
2
F

V
1
V 2
4.  x4, y 4, z 4
V
V 2

-Efficiency (size and operations); -Simplicity

1
F
2

5
5. 
 x5, y 5, z 5
V
...

-Maintainability

V
3
V
4
6. 
 x6, y 6, z 6
H&B 4-7:84-94

-Consistency
-...

H&B 4-7:84-94
 
 
 
 
 
 
 
 
 

Polygons in space 1

Polygons in space 2

•3D flat polygon in (infinite) plane •Equation plane:
Ax + By + Cz + D = 0
z
Plane: z=0
y
x
H&B 4-7:84-94

•Position point (	x, y, z) w.r.t. plane:
Ax + By + Cz + D > 0 : point in front of plane
Ax + By + Cz + D < 0 : point behind plane
z
Plane: 	z=0
y
x
H&B 4-7:84-94

 
 
 
 
 
 
 
4

 Polygons in space 3	Polygons in space 4
•Normal: vector 	N 	perpendicular to plane	Given vertices	of 	 a 	polygon,

determine  

plane  

equation 

Ax

?

By

?

Cy

?

D

?

.0

•Unit normal: |	N|=1
Normal: (0, 0, 1)	Take three	arbitrary vertices	V	1,	V2	en 	V3.
 
Vlak: 	z=0	Calculate	 the	normal	 vector	:	N	z
N	?	(V	-	V	)	×	(V	-	V	).

z	2	1	3	1	V
3


V
 is 

y

in the

plane,  








hence  







In general:

·

VN
11

?

D

?

.0

V
1

y
Normal:  N=(A, B, C) for

In 
: 
short

x

V
2

Plane: 

Ax + By + Cz + D = 0 

A

?

N
x

,

B

?

N

,

C

?

N

,

D

?

·-

VN

.

x

Or           N.X	+D = 0
H&B 4-7:84-94

y

z

1

H&B 4-7:84-94
 
 
 
 
 
 
 
 
 

OpenGL Fill-Area Functions 1

OpenGL Fill-Area Functions 2

glBegin(GL_POLYGON);   // Specify what to draw, 

// a polygon

3

4

GL_POLYGON: convex polygon

// Geometric info via vertices:	1	5
glVertex*(); // 13
45Concave polygons give unpredictable 
results. 2glVertex*(); // 2
...          // ... glEnd;
1
glVertex[234][isfd]
[234]: 2D, 3D, 4D
[isfd]: integer, short, float, double
For instance: glVertex2i(100, 25);	H&B 4-4:81-82	H&B 4-8:94-99
 
 
 
 
 
 
 
 
 

OpenGL Fill-Area Functions 3

OpenGL Fill-Area Functions 4

• 	GL_TRIANGLES: sequence of triangles
• 
	GL_QUADS: sequence of quadrilaterals

3

6

5

9

4 8

11

1

3

7

10

7

3

1

2

4 8

7

5                                                                                      612 1                                                                                     25 
• 	GL_TRIANGLE_STRIP:

9

2

4 6

8

• 	GL_QUAD_STRIP: strip of quadrilaterals
6
 
 
• 	GL_TRIANGLE_FAN:	1	5	2	4	6	8
4                                                                     13 H&B 4-8:94-99                                                      57 2
3H&B 4-8:94-99  
 
 
 
 
 
 
5

 
More efficiency

OpenGL Display lists 1

•Reduce the number of function calls:
-OpenGL Vertex Arrays: pass arrays of vertices instead of single ones;
 
 
•Store information on GPU and do not resend:
-OpenGL Display lists;
-Vertex Buffer Objects.
 
 
H&B App. C
 
 
 
 
 
 
 
 
 
OpenGL Display lists 2
 
 
// Straightforward
void drawRobot(); 
  // lots of glBegin, glVertex, glEnd calls } void drawScene(); {
drawRobot();
glTranslate3f(1.0, 0.0, 0.0);
drawRobot();
}
H&B 4-15 111-113
 
 
 
 
 
 
 
 
 
OpenGL Display lists 4
First, get an id. Either some fixed constant, or get a guaranteed unique one:
rl_id= glGenLists(1);         // get id for list
Next, create a display list with this id:
glNewList(rl_id, GL_COMPILE);  // create new list drawing commands;             // draw something glEndList();                   // end of list
Finally,  "replay" the list. Change the list only when the scene is changed:
glCallList(rl_id);             // draw list
H&B 4-15 111-113

Key idea: Collect a sequence of OpenGL commands in a structure, stored at the GPU, and reference it later on
+  Simple to program
+  Can give a boost
+  Useful for static scenes and hierarchical models
 
* 	Not the most modern
H&B 4-15 111-113
 
 
 
 
 
 
 
 
 
OpenGL Display lists 3
void drawRobot();
  // lots of glBegin, glVertex, glEndcalls } intrl_id; 
void init(); {
rl_id= glGenLists(1);         // get id for list glNewList(rl_id, GL_COMPILE);  // create new list
drawRobot();                   // draw your object
glEndList(); }                 // end of list
void drawScene(); { glCallList(rl_id);             // draw list glTranslate3f(1.0, 0.0, 0.0); glCallList(rl_id);             // and again }
H&B 4-15 111-113
 
 
 
 
 
 
 
 
 
 
Attributes 1
• 	Attribute parameter: determines how a 
 
graphics primitive is displayed
•For instance for line: color, width, style
•OpenGL: simple 	state system
-Current setting is maintained; -Setting can be changed with a function.
 
 
H&B 5-1:130

 
 
 
 
 
 
 
6

 
Attributes 2

Color 1

Example:
glLineWidth(width);
glEnable(GL_LINE_STIPPLE);
glLineStipple(repeatfactor, pattern); // draw stippled lines
... 
glDisable(GL_LINE_STIPPLE);
Note: special features often must be enabled 
explicitly with glEnable()	.
H&B 5-7:141-143
 
 
 
 
 
 
 
 
 
 
Color 2
 
 
•RGB: hardware oriented model •Dimensions are not natural
•(0, 0, 0): black; (1, 0, 0): red; (1, 1, 1) white 
 
 
 
 
 
 
H&B 5-2:130-131
 
 
 
 
 
 
 
 
 
 
Color 4
 
 
•HSL: Hue, Saturation (Chroma), Lightness •More natural dimensions
 
 
 
 
 
 
 
 
H&B 19-8:618-618

RGB mode : •color = (red, green, blue)
• 	glColor[34][bisf]: set color of vertex
•For example:
- 	glColor4f(red, green, blue, alpha)
- 	alpha: opacity (1-transparantie)
 
 
 
H&B 5-2:130-131
 
 
 
 
 
 
 
 
 
 
Color 3
 
 
•HSV: Hue, Saturation (Chroma), Value •More natural dimensions
• 	Hue: red-orange-yellow- green-blue-purple;
 
• 	Saturation: grey-pink-red;
 
• 	Value: dark-light
 
 
 
H&B 19-7:614-617
 
 
 
 
 
 
 
 
 
 
Color 5
 
 
•Color: big and complex topic •Color: not physical, but perceptual
 
 
 
 
AB

 
 
 
 
 
 
 
7

 
Color 6

Color 6
 
 
 
 
 
 
 
 
 

•Adelson checkerboard illusion
 
 
 
 
 
 
 
 
 
 
 
Next
 
 
•We now know how to draw polygons. •How to model geometric objects?

•Adelson checkerboard illusion

 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
 
8

