Let us find out the goals of drawing. Straight line should appear straight. Now again you start thing in the rasterized scenario or you can way till I bring up the illustration of drawing a line in a discretized environment because a straight line is a straight line.
If you think from a mathematical perspective or from a child as we say we give a scale and you can draw a line, a straight line is a straight line. Unless the scale shifts or the paper shifts as long as it is a rigid environment you draw a line it always appears straight. So what is the issue here? And when we talk about straight line should appear straight, yes this is because the rasterized environment which we will see that it makes the line appear not crooked but something else which we will see. So our motivation or the goal here for the problem is to find out those addressable pixels from the starting point to the ending point in this discrete array of pixels where in such a manner that the straight line should appear as straight as possible, as linear as possible from the starting point to the finishing point.
So that is the first goal, a straight line should appear straight and you can hold on till the examples, come to find out what these goals basically mean, we will have lot of examples today. And the second goal as it appears on the screen now is that the line should start and end accurately, that is very very important. Actually we can start from a point and reach the other point and draw the line in the reverse fashion. But whatever the case may be you should draw the line accurately and should not expect to come up with an algorithm where you start at a staring point and finish somewhere near or close to the ending point. That will not solve the purpose and that is not the goal of computer graphics. It should start at the starting point and end at the finishing point that should be the case and matching endpoints with connecting lines. That is the case which is very important, two main goals are it should appear straight and it should be accurate.
The lines should have constant brightness that is also the case. And the question comes is when you provably take a pencil and draw the line it typically appears constant in a paper but what is the issue here when you talk of the line having constant brightness? Well you will see that the addressable pixels which you have drawn may not be uniformly spaced along the lines in terms of the distance between corresponding pixels as they come from the starting to the finishing point and if the addressable pixel if the distance between them start wearing from small to large from the starting point to the finishing point, the pixels which are there, their gaps are non-uniform and what will happen? The line may appear slightly darker at certain small small sections and light align in certain other.
We will also try to see how to make a line with a constant brightness. And the last and most important point as far as Computer Science is concerned for any algorithm it should be as fast as possible, the complexity should be made as minimal, the cost of computation because you have to calculate certain value and it should be drawn as rapidly as possible such that the line is drawn very fast. So what are the problems associated with drawing a line?
(Refer Slide Time: 10:00)
Basically the main goal of the algorithm or the problem is to determine which pixels to illuminate to satisfy the above goals. All the pixels are dark, if you want to just draw one line on the screen you have to eliminate a set of pixels and which are those pixels? Pixels from the starting to the finishing point are the pixels which you have to illuminate up, fill up the raster such that the straight line appears straight, accurate and uniform brightness.
Now this problem of the line appearing not very uniform in terms of brightness and straight does not happen in all cases of line. Out of all possible lines which you can draw in the screen, the lines which are vertical on the screen exactly vertical, horizontal it means typically we are talking about along the x axis of the screen and y axis of the screen and lines with slope plus and minus 1 that is the angle between the line on the x or y axis is 45 degree or pi by 4 radians. These are the three or four special cases where you actually get a straight line and they are the easiest to draw. We will see that as well.
For all other cases, for all other lines it creates problems. That means you have an effect what is called as a stair casing effect; it is also called jaggies or also called aliasing. These three terms will be used interchangeably throughout this course and we will soon see what is meant by the effect of stair casing of a line in general. Remember the second point which we discussed just before, the effect of stair casing, jaggies or aliasing do not occur in the line if the line is absolutely vertical, horizontal or to the slope of the plus or minus 1.
These lines appear absolutely straight. There is absolutely no problem. Of course in these cases also we have to find out using the same algorithm what are the points in between the addressable point which will be illumination. But the problem of the stair casing effect or the jaggies or aliasing together are the terms which are used interchangeably sometimes called as an aliasing or the stair casing effect, these problems will not be there for these three or four special cases whereas for every other line you will have this effect and the quality of the line drawn depends on the location of the pixels and their brightness. So that is also very important that the location on the pixels on the line determine the local brightness in the line and that local brightness should be uniform from the starting to the finishing point. So these are the various problems.
(Refer Slide Time: 12:41)
This is an example of an effect of stair casing, jaggies or aliasing which you are talking about. And therefore the problem comes because it is difficult to find out which are the addressable pixels which must be eliminated. In this case I am trying to draw a line from the left end corner or here at the bottom left of the line to the top right. So the starting and ending pixels are given and the question comes is which are the pixels in the line you can almost visualize that the line does not actually pass the center of any pixel so you have to eliminate a set of pixels to make it appear very straight and you can see here in the middle there are two options for you, you can eliminate the top white portion which is either left or the bottom blue one. In both cases it is the same because the line passes through in the center of these two pixels and you can actually have two different lines drawn for the same straight line, same specification of the starting point or ending point or slope and in set of the line. We will see the equations of the line.
But in this case you can see the effect of stair casing as you move from left to right, left bottom to top right it appears as a stair case and that is why it is called as a stair casing effect. Or the line appears as jaggies, have you moved through the analog line, analog
line means a straight line exactly as you have drawn in a graph paper, the line appears very crooked and jaggy from left to right and it oscillates and that is the effect which is predominant in almost any line except special lines. And then again now you can almost visualize, you basically need a very fast algorithm to find out which are these lines from the bottom left to the top right of the screen to be drawn here are illuminated such that you have the uniform straight line. That is the problem.
Of course we will take numerical examples to find out how to calculate and get those pixels. But this is an example which illustrates two facts, the one fact is that there is an effect of stair casing or jaggies as you move the line dances up and then again there are two options in certain cases, you have two options of choosing this or that pixel and it is sometimes difficult to find out which pixels you will draw, actually you will have uniform illumination and that is the main problem. As far as the third and last goal of the algorithm is concerned is, now the question comes is, how fast you can draw because the algorithm must be so fast that you must be able to draw a line instant in a scale.
If the algorithm is slow you are illuminating one pixel after another and nobody will purchase your graphics software because you are not going to draw only a single line, you are going to draw an entire picture which consists of lines, arcs, text, polygons, shading, textures and all that. And to draw a line itself if it could be a very slow process, to a user basically he sees one line drawn nearer then another line and so on. To complete one step itself if you take a second or more and the entire picture a few minutes then nobody in fact will draw a line. In fact you should draw a line as fast as possible so that the user cannot perceive that the line is being drawn. The algorithm must be very fast. So you need to do some computation very fast and in the integer space in the discretized raster space such that the algorithm is drawn very fast.
I repeat again that for an analog case as far as mathematics is concerned, given the specification of a line you can always draw a line in a graph paper. There is absolutely no problem. But that is not a simple transformation form, the analog graph paper or a white paper in fact to the discretized skin where we have an array of pixels, discretized environment and you have to select certain pixels, certain addressable pixels in the raster map and it should be drawn. So these are the two problems which hamper us and of course there are good algorithms which we will see. We will