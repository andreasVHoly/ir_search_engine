addition. If you can eliminate these two, of course you cannot eliminate both cannot draw a line, how to eliminate? If you can eliminate the round function which is the costliest and still exists in the DDA or the incremental algorithm and replace the floating point arithmetic of addition by an integer arithmetic which will be several times faster, then eliminate some of the round operation. You can almost imagine that for a line to be drawn with several hundreds points on the screen the speed up will be tremendous, many many times more than you would like to have for a DDA type of an algorithm which has floating point addition and the round function. So DDA is an incremental algorithm, it has speeded up the algorithm little bit but it is not the most efficient one.
The most efficient one which is going to be discussed now in the next few minutes left in this class. So we carry over also to the next class because it is a very important concept which you must know is the method of the mid point criteria of drawing a line and it is based on the idea or the concept developed by Bresenham’s, it is also called the Bresenham’s line algorithm which is integer based, fully on integer calculations, integer based arithmetic is what you use and it is based on mid point criteria for drawing lines, so that is in it.
(Refer Slide Time: 41:58)
Now let us go back to the problems which we had in DDA.
(Refer Slide Time: 42:24)
Again that it uses a floating point and a round inside the loop. So the DDA in spite of doing incremental has the problem is still slower because of these two draw backs, the drawbacks are the floating point and the round function inside the loop and you have to get rid of this. Of course you have to get rid of the round function. The addition floating point can be made integer; you have to add anyway, you cannot escape that. But once you make the floating point operation integer and throw off the round operation to speed up will get the image. The other part is which we talked in the DDA algorithm is the octants
covering the 2D space. We assumed that you are drawing a line from the left hand side of the screen to right hand side, the slope is less than 1. So if you see all possible lines in the 2D space and there are eight octants, each with angles subtending of pie by 4, that means you are dividing the 2D space into eight different octants.
We are basically solving the algorithm for the first octant only that means the slope is less than 1 from 0 to 1. And if the line lies in any of the other octants, that means the slope is more than 1 or the starting point is to the right and the finishing point is to the left, that means the line could be in the eighth or seventh octant or even third or fourth, then we will see what to do, because those are simple manipulation of certain numbers which you have to manipulate and get the environment done, solve it in the first octant space and then draw the line back. So we are assuming that the line to be drawn for the time being is drawn in the first octant only. That is one and we will see how the other octants are also handled. So we move on to the last few minutes of this lecture on what is called the Bresenham’s algorithm or I will use the technical term of mid point line algorithm.
(Refer