Building a heap[edit]
Building a heap from an array of n input elements can be done by starting with an empty heap, then successively inserting each element. This approach, called Williams' method after the inventor of binary heaps, is easily seen to run in O(n log n) time: it performs n insertions at O(log n) cost each.[a]
However, Williams' method is suboptimal. A faster method (due to Floyd[5]) starts by arbitrarily putting the elements on a binary tree, respecting the shape property (the tree could be represented by an array, see below). Then starting from the lowest level and moving upwards, shift the root of each subtree downward as in the deletion algorithm until the heap property is restored. More specifically if all the subtrees starting at some height   (measured from the bottom) have already been "heapified", the trees at height   can be heapified by sending their root down along the path of maximum valued children when building a max-heap, or minimum valued children when building a min-heap. This process takes   operations (swaps) per node. In this method most of the heapification takes place in the lower levels. Since the height of the heap is  , the number of nodes at height   is  . Therefore, the cost of heapifying all subtrees is:
 
This uses the fact that the given infinite series h / 2h converges to 2.
The exact value of the above (the worst-case number of comparisons during the heap construction) is known to be equal to:
