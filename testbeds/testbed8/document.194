Extract[edit]
The procedure for deleting the root from the heap (effectively extracting the maximum element in a max-heap or the minimum element in a min-heap) and restoring the properties is called down-heap (also known as bubble-down, percolate-down, sift-down, trickle down, heapify-down, cascade-down, and extract-min/max).
1.	Replace the root of the heap with the last element on the last level.
2.	Compare the new root with its children; if they are in the correct order, stop.
3.	If not, swap the element with one of its children and return to the previous step. (Swap with its smaller child in a min-heap and its larger child in a max-heap.)
So, if we have the same max-heap as before
 
We remove the 11 and replace it with the 4.
 
Now the heap property is violated since 8 is greater than 4. In this case, swapping the two elements, 4 and 8, is enough to restore the heap property and we need not swap elements further:
 
The downward-moving node is swapped with the larger of its children in a max-heap (in a min-heap it would be swapped with its smaller child), until it satisfies the heap property in its new position. This functionality is achieved by the Max-Heapify function as defined below in pseudocode for an array-backed heap A of length heap_length[A]. Note that "A" is indexed starting at 1, not 0 as is common in many real programming languages[citation needed].
Max-Heapify (A, i):
    left ? 2*i  // ? means "assignment"
    right ? 2*i + 1
    largest ? i
    
    if left = heap_length[A] and A[left] > A[largest] then:
        largest ? left
    if right = heap_length[A] and A[right] > A[largest] then:
        largest ? right
    
    if largest ? i then:
        swap A[i] and A[largest]
        Max-Heapify(A, largest)
For the above algorithm to correctly re-heapify the array, the node at index i and its two direct children must violate the heap property. If they do not, the algorithm will fall through with no change to the array. The down-heap operation (without the preceding swap) can also be used to modify the value of the root, even when an element is not being deleted. In the pseudocode above, what starts with // is a comment. Note that A is an array (or list) that starts being indexed from 1 up to length(A), according to the pseudocode.
In the worst case, the new root has to be swapped with its child on each level until it reaches the bottom level of the heap, meaning that the delete operation has a time complexity relative to the height of the tree, or O(log n).
