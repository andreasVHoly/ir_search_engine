TrOWL: Tractable OWL 2 Reasoning Infrastructure Edward Thomas, Jeff Z. Pan, Yuan Ren Department of Computing Science, University of Aberdeen, Aberdeen AB24 3UE, UK Abstract. The Semantic Web movement has led to the publication of thousands of ontologies online. These ontologies present and mediate information and knowledge on the Semantic Web. Tools exist to reason over these ontologies and to answer queries over them, but there are no large scale infrastructures for storing, reasoning, and querying ontologies on a scale that would be useful for a large enterprise or research institution. We present the TrOWL infrastructure for transforming, reasoning, and querying OWL2 ontologies which uses novel techniques such as Quality Guaranteed Approximations and Forgetting to achieve this goal. 1 Introduction Ontologies play a key role in the Semantic Web [3], where the W3C recommendation OWL [9] and its successor OWL2 [6] have become the de facto standards for publishing and sharing ontologies online. Increasingly these ontologies are being used by a variety of organisations, covering the definitions of a very wide range of subjects. While the number and variety of ontologies increases, the question of how to use these ontologies at an organisational level remains unresolved. The reason why this is not a trivial problem is that OWL-DL language has a worst-case computational complexity of NExpTime, and 2NExpTime for OWL2- DL. This means that increasingly large ontologies may, in the worst case, require exponentially increasing computing resources to reason. Because of this, OWL2 also includes a number of tractable profiles which have combined complexity of PTIME-complete or better; however, these profiles all greatly restrict the expressive power of the language. As tool support for these profiles is still limited, it is also very easy for an ontology developer to accidentally exceed the complexity of their target profile by using a construct which is beyond the capability of that language fragment. The approach of TrOWL is to offer support for all the expressive power of OWL2-DL, while maintaining tractability, by using language transformations. In particular, we utilise a Semantic Approximation [7] to transform OWL2-DL ontologies into OWL2-QL for conjunctive query answering, and a syntactic approximation from OWL2 to OWL2-EL for TBox reasoning. In addition, TrOWL contains a profile checker to detect which profile an ontology may already fit into, and it has support for heavyweight reasoning using a plug-in reasoner such as Fact++, Pellet, Hermit, or Racer.
2 Applications The TrOWL reasoner was developed to support work on the MOST project1 as well as provide reasoning support for large ontology-based knowledge bases. Validating Process Refinements During software development, processes are modelled in the standard language, Business Process Modelling Notation (BPMN); these process models are then refined to produce progressively more detailed models. Several metrics exist to validate these refinements as being consistent with the earlier models, but no tools are available which can validate these refinements automatically across multiple refinements on large models. Our approach has been to translate this process model into an ontology and use ontology reasoning services to validate the model. With this approach, we can validate that the refinements are valid, or highlight the processes which are causing the problem. The process refinement case study generates ontologies with general concept inclusions (GCIs) of particular patterns. At the time of developing REL, mainstream reasoners such as Pellet and FaCT++ failed to efficiently provide complete classification results on the generated ontologies. Via the syntactic approximation of TrOWL, the GCIs in these ontologies can be efficiently resolved and the reasoning results can be proved complete. Software Engineering Guidance Ontology The physical device configuration case study uses ontologies to validate the consistency of the configuration of a network device. These devices are configured with several cards, and this configuration must be validated against a model which describes correct configurations. The case study generates ontologies describing the configuration of network devices. These ontologies can sometimes be inconsistent, reflecting an invalid configuration of a physical device. To understand how this is manifested in the physical device and provide guidance on how it may be resolved, it is necessary to find justifications for the inconsistency, and isolate each axiom set which may be causing the inconsistency. Traditional tableaux reasoners usually terminate when an inconsistency is detected, making it difficult obtain all justifications. In this case, TrOWL can provide a more efficient and reliable service when used as a reasoning backend. Linked Open Data We have also investigated using TrOWL for linked open data repositories. We used the RDF-DL reasoning component in the Billion Triple Challenge in ISWC 2009. We managed to successfully load and reason over the billion triple RDF data set, with full RDFS reasoning over class and property subsumption. The benefit of using TrOWL for linked open data is that it supports reasoning in all profiles of OWL, as well as using RDF-DL reasoning over RDFS data. Since conjunctive query answering is always reduced to OWL-QL query answering, this allows queries to be run over large heterogeneous ontologies with its characteristic AC0 data complexity.
