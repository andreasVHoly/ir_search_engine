3. The Processing Stages and Resources of NaturalOWL
Natural owl adopts a pipeline architecture, which is common in nlg
(Reiter & Dale, 2000),
though the number and purpose of its components often vary (Mellish, Scott, Cahill, Paiva,
Evans, & Reape, 2006). Our system generates texts in three stages,
document planning, micro-planning, and surface realization, discussed in the following sections; see Figure 1.
3.1 Document Planning
Document planning consists of content selection, where the system selects the information
to convey, and text planning , where it plans the structure of the text to be generated.
3.1.1 Content Selection
In content selection, the system rst retrieves from the ontology all the owl
statements
that are relevant to the class or individual to be described, it then converts the selected
676
Generating Natural Language Descriptions from OWL Ontologies
owl
statements to message triples, which are easier to express as sentences, and it nally
selects among the message triples the ones to be expressed.
OWL statements for individual targets
Let us rst consider content selection when Natural
owl
is asked to describe an
individual
(an entity), and let us call that individual the
target
. The system scans the
owl
statements
of the ontology, looking for statements of the forms listed in the left column of Table 1.
8
In effect, it retrieves all the statements that describe the target directly, as opposed to
statements describing another individual or a (named) class the target is related to.
owl
allows arbitrarily many nested
ObjectUnionOf
and
ObjectIntersectionOf
operators, which may lead to statements that are very dicult to express in natural language.
To simplify text generation and to ensure that the resulting texts are easy to comprehend,
we do not allow nested
ObjectIntersectionOf
and
ObjectUnionOf
operators in the ontologies the texts are generated from. In Table 1, this restriction is enforced by requiring class
identifers to appear at some points where
owl
also allows expressions that construct unnamed classes using operators. If an ontology uses unnamed classes at points where Table 1
requires class identi ers (named classes), it can be easily modi ed to comply with Table 1
by de ning new named classes for nested unnamed ones.
9
In practice, nested
ObjectUnionOf
and
ObjectIntersectionOf
operators are rare; see the work of Power et al. (Power, 2010;
Power & Third, 2010; Power, 2012) for information of the frequencies of di erent types of
owl
statements.
10
Statements of the form
ClassAssertion(
Class target
)
may be quite complex, because
Class
is not necessarily a class identi er. It may also be an expression constructing an
unnamed class, as in the following example. This is why there are multiple rows for
ClassAssertion
in Table 1.
ClassAssertion(
ObjectIntersectionOf(:Wine
ObjectHasValue(:locatedIn :stEmilionRegion)
ObjectHasValue(:hasColor :red) ObjectHasValue(:hasFlavor :strong)
ObjectHasValue(:madeFrom :cabernetSauvignonGrape) ObjectMaxCardinality(1 :madeFrom))
:chateauTeyssier2007)
Natural
owl
would express the
owl
statement above by generating a text like the following.
The 2007 Chateau Teyssier is a wine from the St. Emilion region. It has red color and strong avor. It
is made from exactly one grape variety: Cabernet Sauvignon grapes.
Recall that the texts of Natural
owl
are intended to be read by end-users. Hence, we
prefer to generate texts that may not emphasize enough some of the subtleties of the
owl
8. Some
owl
statements shown in Table 1 with two arguments can actually have more arguments, but they
can be converted to the forms shown.
9. It is also easy to automatically detect nested unnamed classes and replace them, again automatically,
by new named classes (classes with
owl
identi ers). The domain author would have to be consulted,
though, to provide meaningful
owl
identi ers for the new classes (otherwise arbitrary identi ers would
have to be used) and natural language names for the new classes (see Section 3.2.1 below).
10. One could also refactor some nested operators; for example,
t
2
((
A
[
B
)
\
(
C
[
D
)) is equivalent to
t
2
(
A
[
B
) and
t
2
(
C
[
D
). The conversion to message triples, to be discussed below, in e ect
also performs some refactoring, but it cannot cope with all the possible nested union and intersection
operators, which is why we disallow them as a general rule.
677
Androutsopoulos, Lampouras, & Galanis
owl
statements
Message triples
ClassAssertion(
NamedClass target
)
<
target
, instanceOf,
NamedClass
>
ClassAssertion(
ObjectComplementOf(
NamedClass
)
target
)
<
target
, not(instanceOf),
NamedClass
>
ClassAssertion(
ObjectOneOf(
indiv1 indiv2
...)
target
)
<
target
, oneOf,
or(
indiv1
,
indiv2
, ...)>
ClassAssertion(
ObjectHasValue(
objProp indiv
)
target
)
<
target
,
objProp
,
indiv
>
ClassAssertion(
ObjectHasValue(
dataProp dataValue
)
target
)
<
target
,
dataProp
,
dataValue
>
ClassAssertion(ObjectHasSelf(
objProp
)
target
)
<
target
,
objProp
,
target
>
ClassAssertion(
ObjectMaxCardinality(
number prop
[
NamedClass
])
target
)
<
target
, maxCardinality(
prop
),
number
[:
NamedClass
]>
ClassAssertion(
ObjectMinCardinality(
number prop
[
NamedClass
])
target
)
<
target
, minCardinality(
prop
),
number
[:
NamedClass
]>
ClassAssertion(
ObjectExactCardinality(
number prop
[
NamedClass
])
target
)
<
target
, exactCardinality(
prop
),
number
[:
NamedClass
]>
ClassAssertion(
ObjectSomeValuesFrom(
objProp NamedClass
)
target
)
<
target
, someValuesFrom(
objProp
),
NamedClass
>
ClassAssertion(
ObjectAllValuesFrom(
objProp NamedClass
)
target
)
<
target
, allValuesFrom(
objProp
),
NamedClass
>
ClassAssertion(
ObjectIntersectionOf(
C1 C2
...)
target
)
convert
(ClassAssertion(
C1 target
))
convert
(ClassAssertion(
C2 target
)) ...
ClassAssertion(
ObjectUnionOf(
C1 C2
...)
target
)
or(
convert
(ClassAssertion(
C1 target
)),
convert
(ClassAssertion(
C2 target
)),
...)
ObjectPropertyAssertion(
objProp target indiv
)
<
target
,
objProp
,
indiv
>
DataPropertyAssertion(
dataProp target dataValue
)
<
target
,
dataProp
,
dataValue
>
NegativeObjectPropertyAssertion(
objProp target indiv
)
<
target
, not(
objProp
),
indiv
>
NegativeDataPropertyAssertion(
dataProp target dataValue
)
<
target
, not(
dataProp
),
dataValue
>
DifferentIndividuals(
target indiv
)
<
target
, differentIndividuals,
indiv
>
DifferentIndividuals(
indiv target
)
<
target
, differentIndividuals,
indiv
>
SameIndividual(
target indiv
)
<
target
, sameIndividual,
indiv
>
SameIndividual(
indiv target
)
<
target
, sameIndividual,
indiv
>
Notation: Square brackets indicate optional arguments, and
convert
(

)
a recursive application of the
conversion to

.
NamedClass
is a class identi er;
objProp
,
dataProp
, and
prop
are identi ers of object
properties, datatype properties, and properties;
indiv
,
indiv1
, . . . are identi ers of individuals;
dataValue
is a datatype value; and
C
,
C1
, . . . are class identi ers, or expressions constructing classes
without
ObjectIntersectionOf
or
ObjectUnionOf
.
Table 1:
owl
statements for an
individual
target, and the corresponding message triples.
statements, in order to produce more readable texts. An
owl
expert might prefer, for
example, the following description of
chateauTeyssier2007
, which mirrors more closely the
corresponding
owl
statements.
The 2007 Chateau Teyssier is a member of the intersection of: (a) the class of wines, (b) the class of
individuals from (not necessarily exclusively) the St. Emilion region, (c) the class of individuals that have
(not necessarily exclusively) red color, (d) the class of individuals that have (not necessarily exclusively)
strong avor, (e) the class of individuals that are made exclusively from Cabernet Sauvignon grapes.
678
Generating Natural Language Descriptions from OWL Ontologies
Stricter texts of this kind, however, seem inappropriate for end-users. In fact, it could be
argued that even mentioning that the wine is made from
exactly
one grape variety in the
text that Natural
owl
produces is inappropriate for end-users. Our system can be instructed
to avoid mentioning this information via user modeling annotations, discussed below.
OWL statements for class targets
If the system is asked to describe a
class
, rather than an individual, it scans the ontology
for statements of the forms listed in the left column of Table 2. The class to be described
must be a named one, meaning that it must have an
owl
identi er, and
Target
denotes
its identi er. Again, to simplify the generation process and to avoid producing complicated
texts, Table 2 requires class identi ers to appear at some points where
owl
also allows
expressions that construct unnamed classes using operators. If an ontology uses unnamed
classes at points where Table 2 requires class identi ers, it can be easily modi ed.
In texts describing classes, it is dicult to express informally the di erence between
EquivalentClasses
and
SubClassOf
.
EquivalentClasses(
C1 C2
)
means that any individual
of
C1
also belongs in
C2
, and vice versa. By contrast,
SubClassOf(
C1 C2
)
means that any
member of
C1
also belongs in
C2
, but the reverse is not necessarily true. If we replace
EquivalentClasses
by
SubClassOf
in the de nition of
StEmilion
of page 672, any member
of
StEmilion
is still necessarily also a member of the intersection, but a wine with all the
characteristics of the intersection is not necessarily a member of
StEmilion
. Consequently,
one should perhaps add sentences like the ones shown in italics below, when expressing
EquivalentClasses
and
SubClassOf
, respectively.
