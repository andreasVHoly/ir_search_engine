Description Logics (DLs) are gaining popularity. In the presence of inverse roles and number restrictions, however, most successful tableau-based DL reasoning systems exhibit problems, for example, degraded performance. The current loss of performance is largely due to lack of some well-known optimization techniques, especially the one for caching the satisfiability status of modal successors.
Based on an investigation of the current research status in optimization techniques and an analysis of why current approaches to handling inverse roles are either inefficient or invalid, several new solutions (including elimination of inverse roles and the sound global tableaux caching techniques) are proposed in this report. For number restrictions, it is known from the RACER [HM01b] experience that the algebraic method has better run-time performance. This report has extended the previous approach of [HM01a] to SHIQ and proved that the algebraic method indeed leads to worst-case optimal decision procedure. This could be the first and important step to a plausible explanation to the practical superiority of the algebraic method over other tableau-based approaches [BCM+03].
121
7.1 Summary
The following summarizes our research results.
A dynamic global sub-tableaux caching technique was presented in Chapter 2.
It addresses the soundness of the conventional sub-tableaux caching techniques.
This technique first appeared in [DH05].
The technique presented in Chapter 2 uses two labels per tableau-node, and relies on the notion of dynamic which was previously seen in various dynamic blocking techniques [HS02]. If further using the reachability analysis technique (also presented in [DH05]), the proposed dynamic tableaux caching technique can be static (in certain situations).
The availability of the caching technique can speed up the reasoning process.
First, the witness space is no longer restricted to ancestor nodes. Second, the
static version of the caching technique [DH05] requires no re-checking and
thus it is safe to discard nodes once they are successfully cached. By doing this,
the tableau algorithm is more space-economic1. Our approach can successfully
deal with a set of (possibly cyclic) unfolding rules and a role hierarchy, thus
it well meets the typical requirement from real applications [DH06]. However,
the proposed dynamic caching technique (as well as the popular dynamic
blocking technique) has a serious drawback, i.e., it has only a very weak inconsistency propagation capability. A weak inconsistency propagation2 would 1This is also observed in the experiments of a recent paper [MSH07] where a pairwise anywhere blocking technique was proposed and implemented for SHIQ. 2We conjecture that the weakness in inconsistency propagation is inherent for tableau-based
decision procedures when reasoning for DLs with inverse roles. Available techniques (such as the 122 possibly result in, as also observed in [DH06], a relatively lower cache hit rate for a group of test cases specially designed.
To benefit from an effective reuse of previously computed satisfiability status
as well as unsatisfiability status (as supported by global tableaux caching techniques [DM00]), it is desirable to eliminate inverse roles. The elimination of inverse roles was presented in Chapter 3. The empirical results were shown in Appendix B. This conversion technique is different from the method of [Gia96] and [Sch91] in that ours relies on the Ramsey-rule [Ram31]. According to [HST99a, HST99b], FaCT [Hor98] was able to classify a UML terminology (19 concepts and 42 axioms) in less than 0.1s of (266MHz Pentium) CPU time, but eliminating inverse roles using an embedding technique [Gia96, Sch91] gives an equisatisfiable FaCT terminology with an additional 84 axioms which FaCT was unable to classify in 12 hours of CPU time. By contrast (see Appendix B), our elimination of inverse roles only slightly increased (less than a constant factor of 5 times) the size of the original ontologies, and RACER [HM01b] solved all converted ontologies within an acceptable time (see Appendix B).
In Chapter 4, a worst-case ExpTime tableau-based decision procedure was presented for the DL ALCFI. Part of this chapter is based on [DH07a].
It is known that ALCFI lacks the finite model property, and consequently a sophisticated double blocking technique is used to terminate the search for models [HS02]. This chapter used the commonly-used equality blocking technique. This idea behind such a blocking shares the intuition of the elimination of functional pseudo model merging technique [Hor95, THPS07] which is considered very useful for almost all DLs) do not prevent that tableau-based procedures suffer from these deficiencies. 123
roles from [CGLN01]. Moreover, this chapter showed that recorded axioms are sufficient for the (sub)tableaux caching technique to be truly static without the help of a reachability analysis (as proposed in [DH05]). Further, it is quite promising that the technique presented in this chapter can be extended to SHIF, a DL corresponding to the ontology language OWL-lite.
In Chapter 5 we showed three different reductions that convert concept satisfi-ability problems from SHQ to ALCQ, from SHOI to SHO, and from acyclic ALCHQI Tbox to acyclic ALCQ Tbox. This chapter improves our previous work in [DHW07] and [DH07b].
In Chapter 6, the algebraic method [OK99, HM01a] was extended for SHIQ.
By applying the integer linear programming technique presented in [Pap81], we also showed that the integer linear programs (resulted from applying the atomic decomposition principle [OK99, HM01a] on modal constraints) can be solved in 2O(n2) where n is the size of the constraints (under binary coding of numbers).
The decision procedure is worst-case exponential time (with an improved upper bound) in the strong sense of binary coding of numbers. This solved the question raised (e.g., in [Tob01]) about how a tableau-based approach could possibly lead to an optimal algorithm for concept satisfiability tests about number restrictions with respect to GCIs.
Previously only Tobies [Tob01] had given an automata-based procedure in 2O(n6) for binary coding of numbers in ALCQIb. Rajeev and Linh [GN07] recently gave a 2O(n2) tableaux procedure for SHI. Our upper bound for SHIQ is 2O(n2) .
This upper bound also applies to SHIQ Abox consistency problems (even not assuming the unique name assumption [BCM+03] for Abox individuals).
7.2 Conclusion and Future Research Direction This report has illustrated our research work in two aspects.
The first aspect is the search for new reasoning techniques (including a revitalizing of the global tableaux caching technique known to be unsound in the past for Dls with inverse roles, a (re)discovering of a variant of the Ramsey-rule [Ram31], and the application of this rule to elimination of inverse relations). We have demonstrated a use of the variant of the Ramsey-rule for elimination of inverse relations for a subfamily
of DLs with inverse roles (i.e., SHIF and SHOI), and have also showed
its usefulness by carrying out experiments on realistic ontologies (corresponding to knowledge bases in the DL ALCI). In contrast to simplicity of elimination of inverse roles in ALCFI and SHOI, we have also shown elimination of inverse roles for ALCHQI which otherwise becomes more complex and less practical for reasoning (though it is possible to implement this transformation). By combining with tableaubased decision procedures, three variants of the global tableaux caching technique have been shown with different strength in inconsistency propagation. In terms of inconsistency propagation, the dynamic global tableaux caching is of the least power, and the global tableaux caching for SHIQ (being the most general of the three variants) is relatively stronger than the former. It should be pointed out that it is number restrictions (other than inverse roles) that make the tableaux caching in SHIQ less powerful. Consequently, the largest fragment in SHIQ that can benefit from the global tableaux caching technique as powerful as ALC is the DL SHIF, 125 which corresponds to OWL-Lite (an ontology language adopted in Semantic Web, see www.w3c.org.).
The second aspect of our research is to provide for a theoretical explanation for an existing technique (i.e., the algebraic method scaling better in practice). Essentially, this report has shown that the combination of the global tableaux caching technique and the integer linear programming technique is sufficient for the algebraic method to be worst case optimal for binary coding of numbers.
This report has covered major fragments3 (i.e., SHIQ and SHOI) of the DL SHOIQ [HS05, HS07]. For the concept satisfiability problem in this language, an NexpTime hardness proof was given in [Tob01] and refined in [Lut04]. A tableau-based decision procedure for SHOIQ appeared recently in [HS05, HS07]. The DL SHOIQ corresponds to the ontology language OWL-DL, which is expected to be the mainstream language in the ontology design and implementation. Given the successful experience of RACER [HM01b] in using the algebraic method for SHQ [HM01a] and the proposed extension for SHIQ, it is therefore meaningful to extend the algebraic method for SHOIQ
