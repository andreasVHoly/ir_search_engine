The OWL 2 Web Ontology Language, informally OWL 2, is an ontology language for the Semantic Web with formally defined meaning. OWL 2 ontologies provide classes, properties, individuals, and data values and are stored as Semantic Web OWL 2 Web Ontology LanguageProfiles W3C Editor's Draft 20 April 2009 Page 1 of 53 http://www.w3.org/2007/OWL/draft/ED-owl2-profiles-20090420/ documents. OWL 2 ontologies can be used along with information written in RDF, and OWL 2 ontologies themselves are primarily exchanged as RDF documents. The OWL 2 Document Overview describes the overall state of OWL 2, and should be read before other OWL 2 documents. This document provides a specification of several profiles of OWL 2 which can be more simply and/or efficiently implemented. In logic, profiles are often called fragments. Most profiles are defined by placing restrictions on the structure of OWL 2 ontologies. These restrictions have been specified by modifying the productions of the functional-style syntax.

An OWL 2 profile (commonly called a fragment or a sublanguage in computational logic) is a trimmed down version of OWL 2 that trades some expressive power for the efficiency of reasoning. This document describes three profiles of OWL 2, each of which achieves efficiency in a different way and is useful in different application scenarios. The profiles are independent of each other, so (prospective) users can skip over the descriptions of profiles that are not of interest to them. The choice of which profile to use in practice will depend on the structure of the ontologies and the reasoning tasks at hand (see Section 10 of the OWL 2 Primer [OWL 2 Primer] for more help in understanding and selecting profiles). • OWL 2 EL is particularly useful in applications employing ontologies that contain very large numbers of properties and/or classes. This profile captures the expressive power used by many such ontologies and is a subset of OWL 2 for which the basic reasoning problems can be performed in time that is polynomial with respect to the size of the ontology [EL++] (see Section 5 for more information on computational complexity). Dedicated reasoning algorithms for this profile are available and have been demonstrated to be implementable in a highly scalable way. • OWL 2 QL is aimed at applications that use very large volumes of instance data, and where query answering is the most important reasoning task. In OWL 2 QL, conjunctive query answering can be implemented using conventional relational database systems. Using a suitable reasoning technique, sound and complete conjunctive query answering can be performed in LOGSPACE with respect to the size of the data (assertions). As in OWL 2 EL, polynomial time algorithms can be used to implement the ontology consistency and class expression subsumption reasoning problems. The expressive power of the profile is necessarily quite limited, although it does include most of the main features of conceptual models such as UML class diagrams and ER diagrams. OWL 2 Web Ontology LanguageProfiles W3C Editor's Draft 20 April 2009 Page 4 of 53 http://www.w3.org/2007/OWL/draft/ED-owl2-profiles-20090420/ • OWL 2 RL is aimed at applications that require scalable reasoning without sacrificing too much expressive power. It is designed to accommodate OWL 2 applications that can trade the full expressivity of the language for efficiency, as well as RDF(S) applications that need some added expressivity. OWL 2 RL reasoning systems can be implemented using rule-based reasoning engines. The ontology consistency, class expression satisfiability, class expression subsumption, instance checking, and conjunctive query answering problems can be solved in time that is polynomial with respect to the size of the ontology. OWL 2 profiles are defined by placing restrictions on the structure of OWL 2 ontologies. Syntactic restrictions can be specified by modifying the grammar of the functional-style syntax [OWL 2 Specification] and possibly giving additional global restrictions. In this document, the modified grammars are specified in two ways. In each profile definition, only the difference with respect to the full grammar is given; that is, only the productions that differ from the functional-style syntax are presented, while the productions that are the same as in the functional-style syntax are not repeated. Furthermore, the full grammar for each of the profiles is given in the Appendix. An ontology in any profile can be written into an ontology document by using any of the syntaxes of OWL 2. Apart from the ones specified here, there are many other possible profiles of OWL 2 — there are, for example, a whole family of profiles that extend OWL 2 QL. This document does not list OWL Lite [OWL 1 Reference]; however, all OWL Lite ontologies are OWL 2 ontologies, so OWL Lite can be viewed as a profile of OWL 2. Similarly, OWL 1 DL can also be viewed as a profile of OWL 2. The italicized keywords must, must not, should, should not, and may are used to specify normative features of OWL 2 documents and tools, and are interpreted as specified in RFC 2119 [RFC 2119].

3 OWL 2 QL The OWL 2 QL profile is designed so that sound and complete query answering is in LOGSPACE (more precisely, in AC0 ) with respect to the size of the data (assertions), while providing many of the main features necessary to express conceptual models such as UML class diagrams and ER diagrams. In particular, this profile contains the intersection of RDFS and OWL 2 DL. It is designed so that data (assertions) that is stored in a standard relational database system can be queried through an ontology via a simple rewriting mechanism, i.e., by rewriting the query into an SQL query that is then answered by the RDBMS system, without any changes to the data. OWL 2 QL is based on the DL-Lite family of description logics [DL-Lite]. Several variants of DL-Lite have been described in the literature, and DL-LiteR provides the logical underpinning for OWL 2 QL. DL-LiteR does not require the unique name assumption (UNA), since making this assumption would have no impact on the OWL 2 Web Ontology LanguageProfiles W3C Editor's Draft 20 April 2009 Page 10 of 53 http://www.w3.org/2007/OWL/draft/ED-owl2-profiles-20090420/ semantic consequences of a DL-LiteR ontology. More expressive variants of DLLite, such as DL-LiteA, extend DL-LiteR with functional properties, and these can also be extended with keys; however, for query answering to remain in LOGSPACE, these extensions require UNA and need to impose certain global restrictions on the interaction between properties used in different types of axiom. Basing OWL 2 QL on DL-LiteR avoids practical problems involved in the explicit axiomatization of UNA. Other variants of DL-Lite can also be supported on top of OWL 2 QL, but may require additional restrictions on the structure of ontologies. 3.1 Feature Overview OWL 2 QL is defined not only in terms of the set of supported constructs, but it also restricts the places in which these constructs are allowed to occur. The allowed usage of constructs in class expressions is summarized in Table 1. Table 1. Syntactic Restrictions on Class Expressions in OWL 2 QL Subclass Expressions Superclass Expressions a class existential quantification (ObjectSomeValuesFrom) where the class is limited to owl:Thing existential quantification to a data range (DataSomeValuesFrom) a class intersection (ObjectIntersectionOf) negation (ObjectComplementOf) existential quantification to a class (ObjectSomeValuesFrom) existential quantification to a data range (DataSomeValuesFrom) OWL 2 QL supports the following axioms, constrained so as to be compliant with the mentioned restrictions on class expressions: • subclass axioms (SubClassOf) • class expression equivalence (EquivalentClasses) • class expression disjointness (DisjointClasses) • inverse object properties (InverseObjectProperties) • property inclusion (SubObjectPropertyOf not involving property chains and SubDataPropertyOf) • property equivalence (EquivalentObjectProperties and EquivalentDataProperties) • property domain (ObjectPropertyDomain and DataPropertyDomain) • property range (ObjectPropertyRange and DataPropertyRange) • disjoint properties (DisjointObjectProperties and DisjointDataProperties) • symmetric properties (SymmetricObjectProperty) • reflexive properties (ReflexiveObjectProperty) • irreflexive properties (IrreflexiveObjectProperty) • asymmetric properties (AsymmetricObjectProperty) • assertions other than individual equality assertions and negative property assertions (DifferentIndividuals, ClassAssertion, ObjectPropertyAssertion, and DataPropertyAssertion) OWL 2 Web Ontology LanguageProfiles W3C Editor's Draft 20 April 2009 Page 11 of 53 http://www.w3.org/2007/OWL/draft/ED-owl2-profiles-20090420/ The following constructs are not supported in OWL 2 QL: • existential quantification to a class expression or a data range (ObjectSomeValuesFrom and DataSomeValuesFrom) in the subclass position • self-restriction (ObjectHasSelf) • existential quantification to an individual or a literal (ObjectHasValue, DataHasValue) • enumeration of individuals and literals (ObjectOneOf, DataOneOf) • universal quantification to a class expression or a data range (ObjectAllValuesFrom, DataAllValuesFrom) • cardinality restrictions (ObjectMaxCardinality, ObjectMinCardinality, ObjectExactCardinality, DataMaxCardinality, DataMinCardinality, DataExactCardinality) • disjunction (ObjectUnionOf, DisjointUnion, and DataUnionOf) • property inclusions (SubObjectPropertyOf) involving property chains • functional and inverse-functional properties (FunctionalObjectProperty, InverseFunctionalObjectProperty, and FunctionalDataProperty) • transitive properties (TransitiveObjectProperty) • keys (HasKey) • individual equality assertions and negative property assertions OWL 2 QL does not support individual equality assertions (SameIndividual): adding such axioms to OWL 2 QL would increase the data complexity of query answering, so that it is no longer first order rewritable, which means that query answering could not be implemented directly using relational database technologies. However, an ontology O that includes individual equality assertions, but is otherwise OWL 2 QL, could be handled by computing the reflexive–symmetric–transitive closure of the equality (SameIndividual) relation in O (this requires answering recursive queries and can be implemented in LOGSPACE w.r.t. the size of data) [DL-Lite-bool], and then using this relation in query answering procedures to simulate individual equality reasoning [Automated Reasoning]. 3.2 Profile Specification The productions for OWL 2 QL are defined in the following sections. Note that each OWL 2 QL ontology must satisfy the global restrictions on axioms defined in Section 11 of the structural specification [OWL 2 Specification]. 3.2.1 Entities Entities are defined in OWL 2 QL in the same way as in the structural specification [OWL 2 Specification], and OWL 2 QL supports all predefined classes and properties. Furthermore, OWL 2 QL supports the following datatypes: • rdf:text • rdf:XMLLiteral OWL 2 Web Ontology 
