1.3 Knowledge representation in Description Logics
In the previous section a basic representation language for Description Logics was introduced along with some key associated reasoning techniques. Our goal now is to illustrate how Description Logics can be useful in the design of knowledge-based applications, that is to say, how a DL language is used in a knowledge representation system that provides a language for defining a knowledge base and tools to carry out inferences over it. The realization of knowledge systems involves two primary aspects. The first consists in providing a precise characterization of a knowledge base; this involves precisely characterizing the type of knowledge to be specified to the system as well as clearly defining the reasoning services the system needs to provide—the kind of questions that the system should be able to answer. The second aspect consists in providing a rich development environment where the user can benefit from different services that can make his/her interaction with the system more effective. In this section we address the logical structure of the knowledge base, while the design of systems and tools for the development of applications is addressed in the next section.
One of the products of some important historical efforts to provide precise characterizations of the behavior of semantic networks and frames was a functional approach to knowledge representation [Levesque, 1984]. The idea was to give a precise specification of the functionality to be provided by a knowledge base and, specifically, of the inferences performed by the knowledge base—independent of any implementation. In practice, the functional description of a reasoning system is productively specified through a so-called “Tell&Ask” interface. Such an interface specifies operations that enable knowledge base construction (Tell operations) and operations that allow one to get information out of the knowledge base (Ask operations). In the following we shall adopt this view for characterizing both the definition of a Description Logic knowledge base and the deductive services it provides.
Within a knowledge base one can see a clear distinction between intensional knowledge, or general knowledge about the problem domain, and extensional knowledge, which is specific to a particular problem. A DL knowledge base is analogously
An Introduction to Description Logics 17
typically comprised by two components—a “TBox ” and an “ABox.” The TBox contains intensional knowledge in the form of a terminology (hence the term “TBox,” but “taxonomy” could be used as well) and is built through declarations that describe general properties of concepts. Because of the nature of the subsumption relationships among the concepts that constitute the terminology, TBoxes are usually thought of as having a lattice-like structure; this mathematical structure is entailed by the subsumption relationship—it has nothing to do with any implementation. The ABox contains extensional knowledge—also called assertional knowledge (hence the term “ABox”)—knowledge that is specific to the individuals of the domain of discourse. Intensional knowledge is usually thought not to change—to be “timeless,” in a way—and extensional knowledge is usually thought to be contingent, or dependent on a single set of circumstances, and therefore subject to occasional or even constant change.
In the rest of the section we present a basic Tell&Ask interface by analyzing the TBox and the ABox of a DL knowledge base.
