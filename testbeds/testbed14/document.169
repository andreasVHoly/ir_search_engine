Tableaux for modal logics[edit]
In a modal logic, a model comprises a set of possible worlds, each one associated to a truth evaluation; an accessibility relation tells when a world is accessible from another one. A modal formula may specify not only conditions over a possible world, but also on the ones that are accessible from it. As an example, \Box A is true in a world if A is true in all worlds that are accessible from it.
As for propositional logic, tableaux for modal logics are based on recursively breaking formulae into its basic components. Expanding a modal formula may however require stating conditions over different worlds. As an example, if \neg \Box A is true in a world then there exists a world accessible from it where A is false. However, one cannot simply add the following rule to the propositional ones.
\frac{\neg \Box A}{\neg A}
In propositional tableaux all formulae refer to the same truth evaluation, but the precondition of the rule above holds in a world while the consequence holds in another. Not taking into account this would generate wrong results. For example, formula a \wedge \neg \Box a states that a is true in the current world and a is false in a world that is accessible from it. Simply applying (\wedge) and the expansion rule above would produce a and \neg a, but these two formulae should not in general generate a contradiction, as they hold in different worlds. Modal tableaux calculi do contain rules of the kind of the one above, but include mechanisms to avoid the incorrect interaction of formulae referring to different worlds.
Technically, tableaux for modal logics check the satisfiability of a set of formulae: they check whether there exists a model M and world w such that the formulae in the set are true in that model and world. In the example above, while a states the truth of a in w, the formula \neg \Box a states the truth of \neg a in some world w' that is accessible from w and which may in general be different from w. Tableaux calculi for modal logic take into account that formulae may refer to different worlds.
This fact has an important consequence: formulae that hold in a world may imply conditions over different successors of that world. Unsatisfiability may then be proved from the subset of formulae referring to the a single successor. This holds if a world may have more than one successor, which is true for most modal logic. If this is the case, a formula like \neg \Box A \wedge \neg \Box B is true if a successor where \neg A holds exists and a successor where \neg B holds exists. In the other way around, if one can show unsatisfiability of \neg A in an arbitrary successor, the formula is proved unsatisfiable without checking for worlds where \neg B holds. At the same time, if one can show unsatisfiability of \neg B, there is no need to check \neg A. As a result, while there are two possible way to expand \neg \Box A \wedge \neg \Box B, one of these two ways is always sufficient to prove unsatisfiability if the formula is unsatisfiable. For example, one may expand the tableau by considering an arbitrary world where \neg A holds. If this expansion leads to unsatisfiability, the original formula is unsatisfiable. However, it is also possible that unsatisfiability cannot be proved this way, and that the world where \neg B holds should have been considered instead. As a result, one can always prove unsatisfiability by expanding either \neg \Box A only or \neg \Box B only; however, if the wrong choice is done the resulting tableau may not be closed. Expanding either subformula leads to tableau calculi that are complete but not proof-confluent. Searching as described in the "Searching for a closed tableau" may therefore be necessary.
Depending on whether the precondition and consequence of a tableau expansion rule refer to the same world or not, the rule is called static or transactional. While rules for propositional connectives are all static, not all rules for modal connectives are transactional: for example, in every modal logic including axiom T, it holds that \Box A implies A in the same world. As a result, the relative (modal) tableau expansion rule is static, as both its precondition and consequence refer to the same world.
Formula-deleting tableau[edit]
A way for making formulae referring to different worlds not interacting in the wrong way is to make sure that all formulae of a branch refer to the same world. This condition is initially true as all formulae in the set to be checked for consistency are assumed referring to the same world. When expanding a branch, two situations are possible: either the new formulae refer to the same world as the other one in the branch or not. In the first case, the rule is applied normally. In the second case, all formulae of the branch that do not also hold in the new world are deleted from the branch, and possibly added to all other branches that are still relative to the old world.
As an example, in S5 every formula \Box A that is true in a world is also true in all accessible worlds (that is, in all accessible worlds both A and \Box A are true). Therefore, when applying \frac{\neg \Box A}{\neg A}, whose consequence holds in a different world, one deletes all formulae from the branch, but can keep all formulae \Box A, as these hold in the new world as well. In order to retain completeness, the deleted formulae are then added to all other branches that still refer to the old world.
World-labeled tableau[edit]
A different mechanism for ensuring the correct interaction between formulae referring to different worlds is to switch from formulae to labeled formulae: instead of writing A, one would write w:A to make it explicit that A holds in world w.
All propositional expansion rules are adapted to this variant by stating that they all refer to formulae with the same world label. For example, w:A \wedge B generates two nodes labeled with w:A and w:B; a branch is closed only if it contains two opposite literals of the same world, like w:a and w:\neg a; no closure is generated if the two world labels are different, like in w:a and w':\neg a.
The modal expansion rule may have a consequence that refer to a different worlds. For example, the rule for \neg \Box A would be written as follows
\frac{w:\neg \Box A}{w':\neg A}
The precondition and consequent of this rule refer to worlds w and w', respectively. The various calculi use different methods for keeping track of the accessibility of the worlds used as labels. Some include pseudo-formulae like wRw' to denote that w' is accessible from w. Some others use sequences of integers as world labels, this notation implicitly representing the accessibility relation (for example, (1,4,2,3) is accessible from (1,4,2).)
Set-labeling tableaux[edit]
The problem of interaction between formulae holding in different worlds can be overcome by using set-labeling tableaux. These are trees whose nodes are labeled with sets of formulae; the expansion rules tell how to attach new nodes to a leaf, based only on the label of the leaf (and not on the label of other nodes in the branch).
Tableaux for modal logics are used to verify the satisfiability of a set of modal formulae in a given modal logic. Given a set of formulae S, they check the existence of a model M and a world w such that M,w \models S.
The expansion rules depend on the particular modal logic used. A tableau system for the basic modal logic K can be obtained by adding to the propositional tableau rules the following one:
(K) \frac{\Box A_1; \ldots ; \Box A_n ; \neg \Box B}{A_1; \ldots ; A_n ; \neg B}
Intuitively, the precondition of this rule expresses the truth of all formulae A_1,\ldots,A_n at all accessible worlds, and truth of \neg B at some accessible worlds. The consequence of this rule is a formula that must be true at one of those worlds where \neg B is true.
More technically, modal tableaux methods check the existence of a model M and a world w that make set of formulae true. If \Box A_1; \ldots ; \Box A_n ; \neg \Box B are true in w, there must be a world w' that is accessible from w and that makes A_1; \ldots ; A_n ; \neg B true. This rule therefore amounts to deriving a set of formulae that must be satisfied in such w'.
While the preconditions \Box A_1; \ldots ; \Box A_n ; \neg \Box B are assumed satisfied by M,w, the consequences A_1; \ldots ; A_n ; \neg B are assumed satisfied in M,w': same model but possibly different worlds. Set-labeled tableaux do not explicitly keep track of the world where each formula is assumed true: two nodes may or may not refer to the same world. However, the formulae labeling any given node are assumed true at the same world.
As a result of the possibly different worlds where formulae are assumed true, a formula in a node is not automatically valid in all its descendants, as every application of the modal rule correspond to a move from a world to another one. This condition is automatically captured by set-labeling tableaux, as expansion rules are based only on the leaf where they are applied and not on its ancestors.
Remarkably, (K) does not directly extend to multiple negated boxed formulae such as in \Box A_1; \ldots; \Box A_n; \neg \Box B_1; \neg \Box B_2: while there exists an accessible world where B_1 is false and one in which B_2 is false, these two worlds are not necessarily the same.
Differently from the propositional rules, (K) states conditions over all its preconditions. For example, it cannot be applied to a node labeled by a; \Box b; \Box (b \rightarrow c); \neg \Box c; while this set is inconsistent and this could be easily proved by applying (K), this rule cannot be applied because of formula a, which is not even relevant to inconsistency. Removal of such formulae is made possible by the rule:
(\theta) \frac{A_1;\ldots;A_n;B_1;\ldots;B_m}{A_1;\ldots;A_n}
The addition of this rule (thinning rule) makes the resulting calculus non-confluent: a tableau for an inconsistent set may be impossible to close, even if a closed tableau for the same set exists.
Rule (\theta) is non-deterministic: the set of formulae to be removed (or to be kept) can be chosen arbitrarily; this creates the problem of choosing a set of formulae to discard that is not so large it makes the resulting set satisfiable and not so small it makes the necessary expansion rules inapplicable. Having a large number of possible choices makes the problem of searching for a closed tableau harder.
This non-determinism can be avoided by restricting the usage of (\theta) so that it is only applied before a modal expansion rule, and so that it only removes the formulae that make that other rule inapplicable. This condition can be also formulated by merging the two rules in a single one. 
